( get-byte -- success )
@parse-line
  [ ;&get-byte-addr STA2 ]

  ;&get-byte JSR2
  DUP #00 NEQ ,&not-done JCN
    POP #00 RTN
  &not-done

  ;&get-byte JSR2

  &scan-for-dash
    ;&get-byte JSR2
    LIT '- NEQ ,&scan-for-dash JCN

  ;&get-byte JSR2 ;&get-byte JSR2

  ;append-bi-path JSR2

  &scan-for-lf
    ;&get-byte JSR2
    #0a NEQ ,&scan-for-lf JCN

  #01
  RTN

  &get-byte
    LIT2 [ &get-byte-addr $2 ] JMP2

( get-byte -- )
@parse-lines
  &more
    DUP2 ;parse-line JSR2 ,&more JCN
  POP2
  RTN

( -- )
@init-paths
  #ffff [ ;paths STA2 ]
  ;paths [ ;paths-end STA2 ]
  #0000 [ ;path-count STA2 ]
  ;path-so-far [ ;path-so-far-end STA2 ]
  #00 [ ;path-so-far STA ]
  #00 [ ;second-visit-done STA ]
  #00 #2000 ;visited ;memset JSR2
  RTN

( -- )
@dump-paths
  ;paths ( path* )

  &next
  DUP2 2++ SWP2 LDA2
  DUP2 #ffff EQU2 ,&done JCN
    OVR #80 AND NOT ,&not-modified JCN
      LIT '* EMIT
      SWP #7f AND SWP
    &not-modified
    DBGSHORTCHAR POP2
    P< "- >P
    DUP2 2++ SWP2 LDA2 DBGSHORTCHAR POP2
    SP
    ,&next JMP
  &done
  POP2
  POP2
  RTN

( from to -- )
@append-bi-path
  DUP4 ;append-path JSR2
  SWP2 ;append-path JSR2
  RTN

( from to -- )
@append-path
  DUP2 LIT2 "st EQU2 ,&skip JCN
  OVR2 LIT2 "en EQU2 ,&skip JCN

  [ ;paths-end LDA2 ] STA4
  [ ;paths-end *4++ ]
  #ffff [ ;paths-end LDA2 ] STA2
  RTN

  &skip
  POP4 RTN

%PATH_FROM { LDA2 }
%PATH_TO { 2++ LDA2 }
%PATH_ISTERMINATOR { LDA2 #ffff NEQ2 }

( -- )
@walk-paths
  #ffff
  ;initial-path ( path* )
  DUP2 PATH_TO ;enter-room JSR2
  ;walk-path JSR2
  POP2
  POP2
  RTN

( -- )
@walk-path
  ( LIT '< EMIT SP ;unwind-path-always JSR2 )

  ;paths ( path* )
  &next
    ( path* )
    DUP2 PATH_ISTERMINATOR ;&not-done JCN2
      ( path* )
      POP2
      RTN
      &not-done

    ( path* )
    DUP2 PATH_FROM ;get-current-room JSR2 NEQ2 ,&try-next JCN

    DUP2 PATH_TO ;can-visit JSR2 NOT ;&already-visited JCN2

      ( save second visit flag )
      [ ;second-visit-done LDA ] STH

      ( matching-path* )
      LIT '> ;&trace JSR2 POP

      ( path* )
      DUP2 PATH_TO ;enter-room JSR2

      ;unwind-path JSR2

      ( recurse ðŸ˜± )
      ;walk-path JSR2

      LIT '< ;&trace JSR2 POP

      ;leave-room JSR2

      ( restore second visit flag )
      STHr [ ;second-visit-done STA ]

      &already-visited

    &try-next

    4++ ( path* )
    ,&next JMP

  &trace
    RTN
    EMIT SP DUP2 LDA2 DBGSHORTCHAR POP2 LIT '- EMIT DUP2 2++ LDA2 DBGSHORTCHAR POP2 LF #00

( room -- )
@enter-room
  ( P< "entering 20 >P DBGSHORTCHAR LF )
  STH2k #01 STH2r ;add-visitcount JSR2
  DUP2 ;get-visitcount JSR2 #01 LEQ ,&not-second-visit JCN
    DUP2 [ ;twice-visited-room STA2 ]
    &not-second-visit

  [ ;path-so-far-end LDA2 ] STA2
  [ ;path-so-far-end *2++ ]
  #00 [ ;path-so-far-end LDA2 ] STA
  ( ;path-so-far ;print JSR2 LF )
  RTN

( -- )
@leave-room
  ( P< "leaving 20 >P ;get-current-room JSR2 DBGSHORTCHAR POP2 LF )
  ;get-current-room JSR2 [ ;twice-visited-room LDA2 ]
  NEQ2 ,&not-second-exit JCN
    #0000 [ ;twice-visited-room STA2 ]
    &not-second-exit

  #ff ;get-current-room JSR2 ;add-visitcount JSR2

  #00 [ ;path-so-far-end LDA2 ] STA
  [ ;path-so-far-end *2-- ]
  ( ;path-so-far ;print JSR2 LF )
  RTN

( -- room )
@get-current-room
  [ ;path-so-far-end LDA2 ] 2-- LDA2
  RTN

( delta room -- )
@add-visitcount
  ;get-visitcount-ptr JSR2
  DUP2 #0000 EQU2 ,&nope JCN
    *ADD
    RTN
  &nope
  POP2 POP
  RTN

( room -- )
@get-visitcount
  ;get-visitcount-ptr JSR2
  DUP2 #0000 EQU2 ,&nope JCN
    LDA
    RTN
  &nope
  POP2
  #00
  RTN

( room -- visited-ptr )
@get-visitcount-ptr
  DUP2 LIT2 "aa LTH2 ,&big-room JCN
    LIT2 "aa SUB2 ;visited ADD2
    RTN
  &big-room
  POP2 #0000
  RTN

@dump-visited
  LIT 'V EMIT
  ;visited ( p* )
  #0000 STH2 ( p* : cnt )
  &loop
    DUP2 LDA #00 EQU ,&skip JCN
      STH2rk LIT2 "aa ADD2 DBGSHORTCHAR POP2 SP
      &skip
    INC2 INC2r
    STH2rk #2000 LTH2 ,&loop JCN
  POP2r
  POP2
  LF
  RTN

( -- )
@unwind-path
  ( check if last path arrives at end )
  ;get-current-room JSR2 LIT2 "en EQU2 ,&at-end JCN
    RTN
    &at-end
  ;path-count #01 ;add64-byte JSR2
  ;unwind-path-always JMP2

( -- )
@unwind-path-always
  ;path-so-far ;print JSR2 LIT '. EMIT LF
  RTN

( room -- visited )
@can-visit
  (
  LIT '? EMIT ;unwind-path-always JSR2
  ;dump-visited JSR2
  )

  ( allow if visitcount is 0 )
  ;get-visitcount JSR2 #00 EQU

  ( also allow if the double-visit slot is free )
  [ ;twice-visited-room LDA2 ] #0000 EQU2

  ORA RTN

~library/console.lib.tal
~library/string.tal
~library/math.tal

|8000

@initial-path
  "__ "st
@paths
  ( from to )
  $1000
@paths-end $2
@path-count $8

@path-so-far $100
@path-so-far-end $2

@second-visit-done $1
@twice-visited-room $2

|b000
@visited $2000


