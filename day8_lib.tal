( get-byte -- digit1-or-ff digit4-or-ff )
@scan-easy
  ( get-byte )
  [ ;&get-byte STA2 ]

  #ff [ ;&bytes-by-count #0002 ADD2 STA ]
  #ff [ ;&bytes-by-count #0004 ADD2 STA ]

  &next-word
    LIT2 [ &get-byte $2 ] ;parse-byte JSR2
    ( byte-or-ff separator )
    POP ( byte-or-ff )
    DUP #ff EQU ,&done JCN
    DUP ;bit-count JSR2
    ( byte bit-count )
    #00 SWP ;&bytes-by-count ADD2 ( byte addr ) STA

    ,&next-word JMP
  &done
  ( ff ) POP

  [ ;&bytes-by-count #0002 ADD2 LDA ]
  [ ;&bytes-by-count #0004 ADD2 LDA ]
  RTN
  [ &bytes-by-count $8 ]

( byte -- count )
@bit-count
          DUP #11 AND STH  ( : count )
  #01 SFT DUP #11 AND STH  ADDr
  #01 SFT DUP #11 AND STH  ADDr
  #01 SFT     #11 AND STHr ADD
  DUP #04 SFT ADD #0f AND
  RTN

( byte -- parity )
@parity
  DUP #04 SFT EOR
  DUP #02 SFT EOR
  DUP #01 SFT EOR
  #01 AND
  RTN

( get-byte -- byte-or-ff separator )
@parse-byte
  ( patch call site )
  ;&get-byte STA2
  #00 ( byte )
  #00 [ ,&started STR ]
  &next-char
    LIT2 [ &get-byte $2 ] JSR2 ( char )

    DUP #61 LTH ,&digit-done JCN
    DUP #67 GTH ,&digit-done JCN

    ( byte char )
    LIT 'a SUB
    ( byte bitpos )

    #40 SFT ( byte bitpos*16 )
    #01 SWP ( byte 01 bitpos*16 )
    SFT
    ( byte bitshifted )
    ADD
    ( byte+bitshifted )
    #01 [ ,&started STR ]
    ,&next-char JMP

  &digit-done
  ( byte separator )
  STH
  ( byte : separator )

  [ ,&started LDR ] ,&started-ok JCN
    POP #ff ( ff : char )
    &started-ok

  ( byte-or-ff : separator )

  STHr

  ( byte-or-ff separator )

  RTN
  [ &started $1 ]

  &empty
  ( byte char )
  POP POP
  #ff
  RTN

( digit1 digit4 byte -- value )
@convert-byte
  STH ( d1 d4 : byte )
  STHrk AND ;parity JSR2 8* SWP ( 8*parity(byte & d4) d1 : byte )
  STHrk AND ;parity JSR2 10* ADD ( 16*parity(byte & d4)+8*parity(byte & d4) : byte )
  STHr ;bit-count JSR2 ADD ( 8*parity(byte & d4)+parity(byte & d4)+bit-count(byte) )
  ( signature )
  #00 SWP ;&table ADD2 LDA
  RTN
  [ &table 00 00 01 07 04 00 09 08 00 00 00 00 00 03 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 05 06 00 ]

( get-byte -- value-or-ffff )
@convert-line
  ( get-byte )
  [ ,&get-byte STR2 ]
  [ ,&get-byte LDR2 ] ;scan-easy JSR2
  ( digit1 digit4 )
  [ ,&digit4 STR ] [ ,&digit1 STR ]

  #0000 STH2 ( : result )

  ( eat space )
  [ ,&get-byte LDR2 ] JSR2 POP

  &next-byte
    [ ,&get-byte LDR2 ] ;parse-byte JSR2
    ( byte separator )
    SWP
    ( separator byte )
    DUP #ff NEQ ,&not-empty JCN
      POP POP2r #ffff RTN
      &not-empty
    [ ,&digit1 LDR ] [ ,&digit4 LDR ] ( sep byte digit1 digit4 )
    ROT ( sep digit1 digit4 byte ) ;convert-byte JSR2
    ( sep byteval : result )
    LIT2r 000a MUL2r ( sep byteval : result*10 )
    #00 SWP STH2 ADD2r ( sep : result*10+byteval )
    ( separator : result )
    #0a NEQ ,&next-byte JCN

  STH2r
  RTN
  [ &get-byte $2 &digit1 $1 &digit4 $1 ]

( get-byte -- )
@convert-lines
  [ ,&get-byte STR2 ]

  ;&result #0000 ;short-to-64 JSR2

  &next-line
    [ ,&get-byte LDR2 ] ;convert-line JSR2
    ( lineval )
    DUP2 #ffff EQU2 ,&done JCN

    DBGSHORTDEC

    ;&lineval SWP2 ;short-to-64 JSR2

    ;&result ;&lineval ;add64 JSR2

    ,&next-line JMP

  &done
  ( ffff ) POP2

  ;&result ;print64 JSR2
  LF


  RTN
  [ &get-byte $2 &result $8 &lineval $8 ]

~library/console.lib.tal
~library/string.tal
~library/math.tal
