~library/macros.tal
~library/devices.tal

( variables )

|0000

( init )

|0100 @program
  ;on-arg-char .Console/vector DEO2
  BRK !

@on-arg-char
  .Console/read DEI ( char )
  DUP #0a EQU ,&complete JCN
  ;argv #00 ,&argptr LDR ADD2 STA
  ,&argptr LDR INC ,&argptr STR
  BRK !

  &complete
  POP

  ;arg-received JMP2

  &argptr $1

@argv        $20

( arg is in @argv )
@arg-received
  LIT ': EMIT
  ;argv ;print JSR2
  LF

  ;open-file JSR2

  ;&result #0000 ;short-to-64 JSR2

  ;&scores [ ;&next-score STA2 ]
  #ffff [ ;&next-score LDA2 ] STA2

  &next-line
    ;read-byte ;check-line JSR2
    DUP2 #ffff EQU2 ,&done JCN
    DUP2 #0000 EQU2 ,&skip JCN
      DUP2 ;print64 JSR2
      [ ;&next-score LDA2 ] OVR2 ;copy64 JSR2
      [ ;&next-score LDA2 ] #0008 ADD2 [ ;&next-score STA2 ]
      #ffff [ ;&next-score LDA2 ] STA2
    &skip
    POP2
    LF

    ,&next-line JMP

  &done
  POP2

  ;&scores ;dump-int64-list JSR2 LF

  &find-median
    ;&scores ;find-min64 JSR2
    P< "min= >P
    ;print64 JSR2 LF

    ;&scores ;find-max64 JSR2
    P< "max= >P
    DUP2 ;print64 JSR2 LF

    ;is-non-zero64 JSR2 ,&non-zero JCN
      BRK
    &non-zero

    ( ;&scores ;dump-int64-list JSR2 LF )
    ,&find-median JMP

  ;&result ;print64 JSR2 LF

  BRK

  [ &result $8 &scores $1000 &next-score $2 ]

@open-file
  ;argv .File/name DEO2
  #0001 .File/length DEO2
  RTN

( -- next-byte )
@read-byte
  #00 ;&byte STA ( clear byte so that EOF reads as zero )
  ;&byte .File/read DEO2
  LIT &byte 00 ( <- this byte is patched by the two previous instructions! )
  RTN

( x y -- b )
@get-at
  [ ;matrix-w LDA2 ] MUL2 ADD2 ;matrix ADD2 LDA
  RTN

~day10_lib.tal

@matrix $5000
@matrix-w $2
@matrix-h $2
