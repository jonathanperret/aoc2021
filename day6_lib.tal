( parses 1,2,3\n into 31 32 33 ff )
( get-byte list -- )
@parse-byte-list
  ;&list STA2
  ( patch call site )
  ;&get-byte STA2

  #00 ,&started STR
  #00 STH ( : num )
  &next-byte
    LIT2 [ &get-byte $2 ] JSR2 ( b )
    DUP #0a EQU ,&done JCN
    DUP #30 LTH ,&next-number JCN

    #01 ,&started STR
    #30 SUB
    STHr #0a MUL ADD STH
    ,&next-byte JMP

    &next-number
    POP
    STHr ,&append_if_started JSR
    #00 ,&started STR
    #00 STH  ( : num )
    ,&next-byte JMP

  &done
  POP
  ( append final number )
  STHr ,&append_if_started JSR
  ( append terminator )
  #ff ,&append JSR
  RTN

  &list $2

  &started $1
  ( num -- )
  &append_if_started
    ,&started LDR ,&append JCN
    POP
    RTN
  ( num -- )
  &append
    ,&list LDR2 STA
    ,&list LDR2 INC2 ,&list STR2
    RTN

( list -- )
@dump-byte-list
  &loop
    DUP2 LDA
    DUP #ff EQU ,&done JCN
    #00 SWP ;print-short-decimal JSR2 SP
    INC2
    ,&loop JMP
  &done
  POP POP2
  LF
  RTN

( list* stats* -- )
@list-stats
  DUP2 ;clear-stats JSR2
  STH2
  &loop
    DUP2 LDA
    DUP #ff EQU ,&done JCN
    #00 SWP 8** STH2rk ADD2
    #01 ;add64-byte JSR2

    INC2
    ,&loop JMP
  &done
  POP

  POP2 POP2r
  RTN
  &tmp $8

( stats* -- )
@dump-stats
  LITr 09
  &loop
    DUP2 ;print64 JSR2 LF
    #0008 ADD2
    DECr STHrk ,&loop JCN
  POP2 POPr
  RTN

( stats* -- )
@iter-stats
  ;&tmp OVR2 ;copy64 JSR2

  DUP2 #0000 ADD2 OVR2 #0008 ADD2 ;copy64 JSR2
  DUP2 #0008 ADD2 OVR2 #0010 ADD2 ;copy64 JSR2
  DUP2 #0010 ADD2 OVR2 #0018 ADD2 ;copy64 JSR2
  DUP2 #0018 ADD2 OVR2 #0020 ADD2 ;copy64 JSR2
  DUP2 #0020 ADD2 OVR2 #0028 ADD2 ;copy64 JSR2
  DUP2 #0028 ADD2 OVR2 #0030 ADD2 ;copy64 JSR2

  DUP2 #0030 ADD2 OVR2 #0038 ADD2 ;copy64 JSR2
  DUP2 #0030 ADD2 ;&tmp ;add64 JSR2

  DUP2 #0038 ADD2 OVR2 #0040 ADD2 ;copy64 JSR2

  DUP2 #0040 ADD2 ;&tmp ;copy64 JSR2
  POP2
  RTN
  [ &tmp $8 ]

( stats* -- )
@clear-stats
  LITr 09
  &loop
    DUP2 #0000 ;short-to-64 JSR2
    #0008 ADD2
    DECr STHrk ,&loop JCN
  POP2 POPr
  RTN

( r* stats* -- )
@sum-stats
  OVR2 #0000 ;short-to-64 JSR2
  LITr 09
  &loop
    OVR2 OVR2 ;add64 JSR2
    #0008 ADD2
    DECr STHrk ,&loop JCN
  POP2 POP2 POPr
  RTN

( r* list* days -- )
@eval-list
  STH2 ( : days )
  ;&stats ;list-stats JSR2
  &day-loop
    ;&stats ;iter-stats JSR2

    DEC2r ( : days-1 )

    STH2rk ( days : days ) #0000 NEQ2 ,&day-loop JCN

  POP2r ( : )
  ;&stats ;sum-stats JMP2
  [ &list $2 &stats $100 ]

~library/console.lib.tal
~library/string.tal
~library/math.tal
