~library/console.lib.tal
~library/string.tal
~library/math.tal

@snailcalc
  ( get-byte sn* -- )
  &parse
    [ ;&sn STA2 ]
    [ ;&get-byte STA2 ]
    #0000 [ ;&value STA2 ]
    #00 [ ;&value-started STA ]

    &parse/loop
      LIT2 [ &get-byte $2 ] JSR2
      DUP #0a EQU ;&parse/done JCN2
      DUP #00 EQU ;&parse/done JCN2

      DUP LIT '[ NEQ ,&parse/not-[ JCN
        POP
        #8000 ;&parse/append JSR2
        ;&parse/loop JMP2

      &parse/not-[
      DUP LIT '] EQU ,&parse/value-done JCN
      DUP LIT ', EQU ,&parse/value-done JCN
        ( has to be a digit )
        LIT '0 SUB #00 SWP ( digit-val )
        [ ;&value LDA2 ] #000a MUL2 ADD2 ( value+10*digit-val )
        [ ;&value STA2 ]
        #01 [ ;&value-started STA ]
        ;&parse/loop JMP2

      &parse/value-done
      ( ]-or-, )
      POP
      ;&parse/append-value JSR2

      ;&parse/loop JMP2

    &parse/done
    ( terminator-byte )
    POP
    ;&parse/append-value JSR2
    #ffff [ ;&sn LDA2 ] STA2
    RTN

    [ &sn $2 &value $2 &value-started $1 ]
    ( word -- )
    &parse/append
      [ ;&sn LDA2 ] STA2
      [ ;&sn *2++ ]
      RTN

    ( -- )
    &parse/append-value
      [ ;&value-started LDA ] NOT ,&parse/not-started JCN
        [ ;&value LDA2 ] ;&parse/append JSR2
        #0000 [ ;&value STA2 ]
        #00 [ ;&value-started STA ]
        &parse/not-started
      RTN

  ( sn* -- sn* word )
  &load-node
    ( sn* )
    LDA2k SWP2 2++ SWP2
    ( sn+2* value )
    ( SP LIT '( EMIT OVR2 DEC2 DEC2 DBGSHORTn POP2 LIT ': EMIT DBGSHORTn LIT ') EMIT SP )
    ( sn* word )
    DUP2 #ffff EQU2 ;&end-of-tree JCN2
    RTN

  ( sn* -- )
  &print
    ;&print-rec JSR2
    POP2
    RTN

  ( sn* -- sn* )
  &print-rec
    ;&load-node JSR2
    ( sn* word )
    DUP2 #8000 NEQ2 ,&print/not-[ JCN
      POP2
      LIT '[ EMIT
      ( sn* )
      ;&print-rec JSR2
      LIT ', EMIT
      ;&print-rec JSR2
      ( sn* )
      LIT '] EMIT
      RTN

      &print/not-[
    ;print-short-decimal JSR2
    RTN

  &end-of-tree
    P< "unexpected_end_of_tree >P
    !
    RTN

  ( sn* -- exploded )
  &explode
    #0000 [ ;&explode/last-leaf-ptr STA2 ]
    #00 ( sn* depth )
    ;&explode-rec JSR2
    ( sn* depth exploded )
    NIP NIP NIP
    ( exploded )
    RTN

  ( sn* depth -- sn* depth exploded )
  &explode-rec
    STH
    ( sn* : depth )
    ;&load-node JSR2
    ( sn* word : depth )

    DUP2 #8000 NEQ2 ;&explode/not-[ JCN2
      POP2
      ( sn* : depth )
      ( sn* : depth )
      STHr
      ( DBGBYTEn SP )
      ( sn* depth )
      DUP #04 LTH ,&explode/not-deep JCN
        ( LIT '! EMIT )
        ( sn* depth )
        STH ( sn* : depth )

        ( found a node that needs exploding )

        ( propagate left value )
        DUP2 LDA2 ( sn* value )
        ( patch the last leaf encountered )
        [ ;&explode/last-leaf-ptr LDA2 ] #0000 EQU2 ,&explode/no-last-leaf JCN
          ( sn* value )
          [ ;&explode/last-leaf-ptr LDA2 ] LDA2 ADD2 ( sn* value+last-leaf )
          DUP2 [ ;&explode/last-leaf-ptr LDA2 ] STA2
        &explode/no-last-leaf
        ( sn* value )
        POP2
        ( sn* )

        ( propagate right value )
        DUP2 2++ ;&propagate-right JSR2

        ( replace it with a zero literal )
        DUP2 #0000 SWP2 2-- STA2
        ( shift remaining left )
        ( sn* : depth )
        DUP2 ;&shift-left4 JSR2

        ( signal explosion, unwind )
        STHr ( sn* depth )
        #01
        RTN
      &explode/not-deep
      INC ( sn* depth+1 )
      ;&explode-rec JSR2
      ( sn* depth+1 exploded )
      ,&explode-exploded JCN
      ( sn* depth+1 )
      ;&explode-rec JSR2
      ( sn* depth+1 exploded )
      ,&explode-exploded JCN
      DEC ( sn* depth )
      #00
      RTN

      &explode/not-[
    ( sn* word : depth )
    POP2
    ( sn* : depth )
    ( remember the last leaf we saw )
    DUP2 2-- [ ,&explode/last-leaf-ptr STR2 ]
    ( sn* : depth )
    STHr ( sn* depth )
    #00
    RTN
    [ &explode/last-leaf-ptr $2 ]

    &explode-exploded
      ( sn* depth )
      ( LIT '* EMIT )
      #01
      RTN

  ( sn* -- )
  &shift-left4
    ( sn* )
    DUP2 4++ ( sn* sn+4* )
    ;&copy JMP2

  ( sn* -- )
  &propagate-right
    LDA2k [ ;&propagate-right/value STA2 ]
    2++ ( sn+2* )
    &propagate-right/loop
      ( sn* )
      LDA2k ( sn* word )
      DUP2 #ffff EQU2 ;&propagate-right/done JCN2
      DUP2 #8000 LTH2 ,&propagate-right/found JCN
      POP2
      2++
      ,&propagate-right/loop JMP
    &propagate-right/done
    ( sn* ffff )
    POP2 POP2
    RTN
    [ &propagate-right/value $2 ]

    &propagate-right/found
      ( sn* word )
      [ ,&propagate-right/value LDR2 ] ADD2
      ( sn* word+value )
      SWP2 STA2
      RTN

  ( sn* -- didsplit )
  &split
    ;&split-rec JSR2
    NIP NIP
    RTN

  ( sn* -- sn* didsplit )
  &split-rec
    ;&load-node JSR2
    ( sn* word )
    DUP2 #8000 NEQ2 ,&split/not-[ JCN
      POP2
      ( sn* )
      ;&split-rec JSR2
      ,&split/splitted JCN
      ;&split-rec JSR2
      ,&split/splitted JCN
      ( sn* )
      #00
      RTN

      &split/not-[
    ( sn* value )
    ( DBGSHORTDEC )
    DUP2 #000a LTH2 ,&split/not-big JCN

    ( sn* value )

    ( make room for two more nodes )
    OVR2 ;&shift-right4 JSR2

    ( create parent node )
    OVR2 2-- #8000 SWP2 STA2

    ( write left leaf )
    OVR2 OVR2 #01 SFT2 SWP2 STA2

    ( write right leaf )
    OVR2 2++ OVR2 INC2 #01 SFT2 SWP2 STA2

    ( signal split, unwind )
    ( sn* value )
    POP2
    ,&split/splitted JMP

    &split/not-big
    ( sn* value )
    POP2
    #00
    RTN

    &split/splitted
    #01
    RTN

  ( sn* -- )
  &shift-right4
    ( sn* )

    ( read and replace first two words with zeros )
    LDA2k STH2 DUP2 #0000 SWP2 STA2 2++ ( sn*+2 : word1 )
    LDA2k STH2 DUP2 #0000 SWP2 STA2 2++ ( sn*+4 : word2 word1 )
    SWP2r ( sn*+4 : word1 word2 )

    &shift-right4/loop

      ( read next word, overwrite it with word1 )
      LDA2k STH2 ( sn*+4 : word3 word1 word2 )
      SWP2r ( sn*+4 : word1 word3 word2 )
      STH2rk OVR2 STA2 ( sn*+4 : word1 word3 word2 )
      ( did we just write ffff? )
      STH2r #ffff EQU2 ,&shift-right4/done JCN
      SWP2r ( sn*+4 : word2 word3 )
      2++ ( sn*+6 : word2 word3 )

      ,&shift-right4/loop JMP

    &shift-right4/done
    ( sn*+x : word word )
    POP2r POP2r
    POP2
    RTN

  ( sn* -- )
  &reduce
    DUP2 ;&explode JSR2 ,&reduce JCN
    DUP2 ;&split JSR2 ,&reduce JCN
    POP2
    RTN

  ( sndest* snsrc* -- )
  &copy
    SWP2 STH2 ( snsrc* : sndest* )

    &copy/loop
      LDA2k ( snsrc* word : sndest* )
      DUP2 STH2rk STA2 ( snsrc* word : sndest* )
      #ffff EQU2 ,&copy/done JCN
      2++ 2++r ( snsrc+2* : sndest+2* )
      ,&copy/loop JMP

    &copy/done
    ( snsrc+x* : sndest+x* )
    POP2 POP2r
    RTN

  ( sn1* sn2* -- )
  &add
    STH2 ( sn1* : sn2* )

    ( make room )
    ( sn1* : sn2* )
    DUP2 ;&shift-right4 JSR2
    ( a bit less room, please )
    ( sn1* : sn2* )
    DUP2 DUP2 2++ ( sn1* sn1* sn1+2* : sn2* )
    ;&copy JSR2

    ( add root )
    #8000 OVR2 STA2

    ( find end )
    &add/loop
      ( sn1* )
      2++ LDA2k #ffff NEQ2 ,&add/loop JCN

    ( sn1end* : sn2* )
    STH2r ;&copy JSR2

    RTN

  ( get-byte result* -- )
  &list-add
    [ ;&list-add/result STA2 ]
    [ ;&list-add/get-byte STA2 ]

    ( load first number )
    [ ;&list-add/get-byte LDA2 ] [ ;&list-add/result LDA2 ] ;&parse JSR2

    &list-add/loop
      ( load next number )
      [ ;&list-add/get-byte LDA2 ] ;&list-add/tmp ;&parse JSR2
      ( is it the end? )
      [ ;&list-add/tmp LDA2 ] #ffff EQU2 ,&list-add/done JCN
      ( add up into result )
      [ ;&list-add/result LDA2 ] ;&list-add/tmp ;&add JSR2
      ( reduce result )
      [ ;&list-add/result LDA2 ] ;&reduce JSR2
      ,&list-add/loop JMP

    &list-add/done

    RTN

    [ &list-add/get-byte $2 &list-add/result $2 &list-add/tmp $200 ]
