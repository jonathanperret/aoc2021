~library/macros.tal

( devices )

|00 @System     [ &vector $2 &wst  $1 &rst    $1 &pad   $4 &r $2 &g $2 &b $2   &debug $1 &halt $1 ]
|10 @Console    [ &vector $2 &read $1 &pad    $5 &write $1 &error  $1 ]
|a0 @File       [ &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2 ]

( variables )

|0000
@i           $1
@n           $2
@bit-count   $1
@line-count  $2
@oxygen      $2
@co2         $2
@oxygen64    $8
@co264       $8
@result64    $8
@out-n       $2

( init )

|0100 @program
  ;on-arg-char .Console/vector DEO2
  BRK !

@on-arg-char
  .Console/read DEI ( char )
  DUP #0a EQU ,&complete JCN
  ;argv #00 ,&argptr LDR ADD2 STA
  ,&argptr LDR INC ,&argptr STR
  BRK !

  &complete
  POP

  ;arg-received JMP2

  &argptr $1

@argv        $20

( arg is in @argv )
@arg-received
  LIT ': EMIT
  ;argv ;print JSR2
  LF

  ;read-numbers JSR2
  ( ;dump-numbers JSR2 )
  ;compute-oxygen JSR2

  ;read-numbers JSR2
  ( ;dump-numbers JSR2 )
  ;compute-co2 JSR2

  ;compute-result JSR2

  BRK !

@result-txt "O*C= 00

( read binary numbers from file )
@read-numbers
  ;argv .File/name DEO2
  #0001 .File/length DEO2

  #0000 .n STZ2
  #00 .bit-count STZ
  #0000 .line-count STZ2

  &read-line

    LIT '- EMIT SP

    #00 .i STZ
    #0000 ( number )

    &next-digit

      ;read-byte JSR2 ( number digit )

      DUP #00 EQU ;&lines-done JCN2
      DUP #30 LTH ;&line-done JCN2

      DUP EMIT

      #30 SUB #00 SWP ( number 00 bit )

      SWP2 2** ADD2 ( number*2+bit )

      .i LDZ INC .i STZ
      ,&next-digit JMP

    &line-done

    POP ( number )

    SP DBGSHORTDECn SP

    ( append number to list )
    ;numbers .n LDZ2 2** ADD2 STA2 ( )
    .n LDZ2 INC2 DUP2 .n STZ2 .line-count STZ2

    ( remember bit count )
    .i LDZ .bit-count STZ

    LIT '/' EMIT SP .line-count LDZ2 DBGSHORTDECn POP2 LF

    ;&read-line JMP2

  &lines-done

  POP

  LIT '* EMIT LIT '=' EMIT SP .line-count LDZ2 DBGSHORTDECn POP2
  LIT 'x EMIT #00 .bit-count LDZ DBGSHORTDECn POP2
  LF
  RTN

@dump-numbers
  #0000 .n STZ2
  &dump-loop
    ;numbers .n LDZ2 2** ADD2 LDA2 ( number )

    DBGSHORTn SP DBGSHORTDECn SP

    .bit-count LDZ ;print-short-binary JSR2 LF

    .n LDZ2 INC2 DUP2 .n STZ2 ( n+1 )
    .line-count LDZ2 LTH2 ,&dump-loop JCN
  RTN

( number width -- )
@print-short-binary
  STH ( number : bit-pos=width )
  &bit-loop
    ( decrement bit-pos )
    STHr DEC STH ( number : bit-pos )


    DUP2 STHrk ( number number bit-pos : bit-pos )
    SFT2 NIP #01 AND ( number bit : bit-pos )
    #30 ADD EMIT ( number : bit-pos )

    ( loop if bit-pos != 0 )
    STHrk ,&bit-loop JCN

  POPr ( number : )
  POP2 ( : )
  RTN

( bit-pos -- count )
@count-bit
  STH ( : bit-pos )
  #0000 ( count )
  #0000 .n STZ2
  &loop
    ;numbers .n LDZ2 2** ADD2 LDA2 ( count number : bit-pos )

    STHrk ( count number bit-pos )
    SFT2 #0001 AND2 ( count bit )

    ADD2 ( count+bit )

    .n LDZ2 INC2 DUP2 .n STZ2 ( increment n )
    .line-count LDZ2 LTH2 ,&loop JCN
  POPr
  ( count )
  RTN

@compute-oxygen
  #00 ;compute-rating JSR2
  .oxygen STZ2

  LIT 'O EMIT LIT '= EMIT .oxygen LDZ2 DBGSHORTDECn POP2 LF
  RTN

@compute-co2
  #01 ;compute-rating JSR2
  .co2 STZ2

  LIT 'C EMIT LIT '= EMIT .co2 LDZ2 DBGSHORTDECn POP2 LF
  RTN

( invert-match -- )
@compute-rating
  STH ( : invert-match )
  .bit-count LDZ .i STZ
  &bit-loop
    ( decrement i )
    .i LDZ DEC .i STZ

    LIT 'i EMIT LIT '= EMIT #00 .i LDZ DBGSHORTDECn POP SP
    LIT 'l EMIT LIT '= EMIT .line-count LDZ2 DBGSHORTDECn POP SP

    .i LDZ ;count-bit JSR2 ( counts[i] )

    LIT 'c EMIT LIT '= EMIT DBGSHORTDECn SP

    ( compare 2*count with list length: if 2*c >= l then 1 wins )
    DUP2 2** .line-count LDZ2 GEQ2 ( match )

    LIT 'm EMIT LIT '= EMIT DUP #30 ADD EMIT SP

    STHrk ( match invert-match : invert-match )

    LIT 'v EMIT LIT '= EMIT DUP #30 ADD EMIT SP

    EOR ( match )

    LIT 'm EMIT LIT '= EMIT DUP #30 ADD EMIT SP
    LF

    ( match )
    .i LDZ SWP ( bit-pos match )
    ;filter-numbers JSR2

    ;dump-numbers JSR2

    ( loop if line-count > 1 )
    .line-count LDZ2 #0001 GTH2 ;&bit-loop JCN2
  POPr
  ;numbers LDA2 ( rating )
  RTN

@compute-result
  ;oxygen64 .oxygen LDZ2 ;short-to-64 JSR2
  ;co264 .co2 LDZ2 ;short-to-64 JSR2

  ;result-txt ;print JSR2
  ;oxygen64 ;co264 ;mul64 JSR2
  ;result64 ;mul64/get-lo JSR2
  ;result64 ;print64 JSR2 LF
  RTN

( bit-pos match )
@filter-numbers
  STH STH ( : bit-pos match )
  #0000 .n STZ2
  #0000 .out-n STZ2
  &loop
    ;numbers .n LDZ2 2** ADD2 LDA2 ( number : bit-pos match )

    LIT '? EMIT DUP2 .bit-count LDZ ;print-short-binary JSR2 SP

    DUP2 STHrk ( number number bit-pos : bit-pos match )
    SFT2 NIP #01 AND ( number bit : bit-pos match )
    DUP #30 ADD EMIT SP

    OVRr STHr ( number bit match : bit-pos match )
    NEQ ,&skip JCN
      LIT '! EMIT

      ( number : bit-pos match )
      DUP2 ( number number : bit-pos match )

      ;numbers .out-n LDZ2 2** ADD2 ( number number numbers[out-n]* : bit-pos match )
      STA2 ( number : bit-pos match )

      ( increment out-n )
      .out-n LDZ2 INC2 .out-n STZ2
    &skip
    POP2 ( : bit-pos match )
    LF

    ( increment n )
    .n LDZ2 INC2 DUP2 .n STZ2
    .line-count LDZ2 LTH2 ;&loop JCN2
  POP2r ( : )
  ( update line-count from out-n )
  .out-n LDZ2 .line-count STZ2

  RTN

( -- next-byte )
@read-byte
  #00 ;&byte STA ( clear byte so that EOF reads as zero )
  ;&byte .File/read DEO2
  LIT &byte 00 ( <- this byte is patched by the two previous instructions! )
  JMP2r

~library/console.lib.tal
~library/math.tal

@numbers $2000
