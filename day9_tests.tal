~library/macros.tal
~library/devices.tal

( variables )

|0000

|0100 @program

  P< "dump_matrix: 0a >P S<
    01 02 03 04 05
    06 07 01 01 01
    01 01 10 01 01
    01 01 01 01 01
    01 01 01 01 01
  >S #0005 #0005 ;test-dump-matrix JSR2
  ( EXPECT dump_matrix: )
  ( EXPECT 12345 )
  ( EXPECT 67111 )
  ( EXPECT 11@11 )
  ( EXPECT 11111 )
  ( EXPECT 11111 )

  STKCHK

  P< "parse_matrix: 0a >P S<
    "91235 0a
    "56789 0a
    "01234 0a
    "56789 0a
    "00009 0a
  >S ;test-parse-matrix JSR2
  ( EXPECT parse_matrix: )
  ( EXPECT @@@@@@@ )
  ( EXPECT @91235@ )
  ( EXPECT @56789@ )
  ( EXPECT @01234@ )
  ( EXPECT @56789@ )
  ( EXPECT @00009@ )
  ( EXPECT @@@@@@@ )

  STKCHK

  P< "process_cell: >P LF                                                  ( EXPECT process_cell: )
  ( clear column basin if cell is high )
  S< "0,0,0,65280,0,0 >S S< "1 >S #0003 #09 ;test-process-cell JSR2        ( EXPECT cols=0 0 0 0 0 0 sizes=1  )
  ( copy basin from top cell )
  S< "0,0,0,65280,0,0 >S S< "1 >S #0003 #01 ;test-process-cell JSR2        ( EXPECT cols=0 0 0 65280 0 0 sizes=2  )
  ( copy basin from left cell )
  S< "0,0,0,65280,0,0 >S S< "1 >S #0004 #01 ;test-process-cell JSR2        ( EXPECT cols=0 0 0 65280 65280 0 sizes=2  )
  ( allocate new basin )
  S< "0,0,0,0,0,0 >S S< "4 >S #0003 #01 ;test-process-cell JSR2            ( EXPECT cols=0 0 0 65282 0 0 sizes=4 1  )
  ( merge basins )
  S< "0,0,65282,65280,0,0 >S S< "4,2 >S #0003 #01 ;test-process-cell JSR2  ( EXPECT cols=0 0 65280 65280 0 0 sizes=7 0  )
  ( skip merging identical basins )
  S< "0,0,65280,65280,0,0 >S S< "4 >S #0003 #01 ;test-process-cell JSR2    ( EXPECT cols=0 0 65280 65280 0 0 sizes=5  )

  STKCHK

  P< "process_matrix: >P LF
  ;sample-matrix [ ;sample-matrix-w LDA2 ] [ ;sample-matrix-h LDA2 ] ;test-process-matrix JSR2
  ( EXPECT process_matrix: )
  ( EXPECT   #    #    #    #    #    #    #    #    #    #    #    #   )
  ( EXPECT 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000  )
  ( EXPECT   #    .    .    #    #    #    .    .    .    .    .    #   )
  ( EXPECT 0000 ff00 ff00 0000 0000 0000 ff02 ff02 ff02 ff02 ff02 0000  )
  ( EXPECT   #    .    #    .    .    .    #    .    #    .    .    #   )
  ( EXPECT 0000 ff00 0000 ff04 ff04 ff04 0000 ff02 0000 ff02 ff02 0000  )
  ( EXPECT   #    #    .    .    .    .    .    #    .    #    .    #   )
  ( EXPECT 0000 0000 ff04 ff04 ff04 ff04 ff04 0000 ff08 0000 ff02 0000  )
  ( EXPECT   #    .    .    .    .    .    #    .    .    .    #    #   )
  ( EXPECT 0000 ff04 ff04 ff04 ff04 ff04 0000 ff08 ff08 ff08 0000 0000  )
  ( EXPECT   #    #    .    #    #    #    .    .    .    .    .    #   )
  ( EXPECT 0000 0000 ff04 0000 0000 0000 ff08 ff08 ff08 ff08 ff08 0000  )
  ( EXPECT   #    #    #    #    #    #    #    #    #    #    #    #   )
  ( EXPECT 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000  )
  ( EXPECT sizes=3 9 14 0 9 0 0 0  )

  STKCHK

  P< "compute_result: >P
  S< "3,9,14,0,9,0,0,0 >S ;make-get-byte JSR2 ;test-basin-sizes ;parse-short-list JSR2 ;test-basin-sizes ;compute-result JSR2
  ( EXPECT compute_result:14*9*9=                 1134 )

  STKCHK

  P< "üëç 0a >P
  ( EXPECT üëç )

  BRK !


~day9_lib.tal
~library/test.tal

( initial-cols* initial-sizes* x cell -- )
@test-process-cell
  ;test-basin-sizes #0006 ;init-basins JSR2

  STH STH2
  ( initial-cols* initial-sizes* )
  ;make-get-byte JSR2 ;test-basin-sizes ;parse-short-list JSR2

  ( set next-basin to end of basins )
  ;test-basin-sizes ( b* )
  &scan-for-last-basin
    DUP2 LDA2 #ffff EQU2 ,&found-terminator JCN
    INC2 INC2
    ,&scan-for-last-basin JMP
  &found-terminator
  [ ;next-basin STA2 ]

  ( initial-cols* )
  ;make-get-byte JSR2 ;column-basins ;parse-short-list JSR2

  ( set last-basin from column x-1 )
  ( : x cell )
  ;column-basins STH2rk DEC2 2** ADD2 LDA2 [ ;last-basin STA2 ]

  STH2r STHr ;process-cell JSR2

  P< "cols= >P
  ;column-basins ;dump-short-list JSR2

  P< "sizes= >P
  ;test-basin-sizes ;dump-short-list JSR2 LF
  RTN

( s* -- get-byte )
@make-get-byte
  ;input STA2
  ;get-byte-from-input
  RTN

( -- b )
@get-byte-from-input
  ;input LDA2 LDA STH
  ;input LDA2 INC2 ;input STA2
  STHr
  RTN

( s* w h -- )
@test-dump-matrix
  [ ;test-matrix-h STA2 ]
  [ ;test-matrix-w STA2 ]
  ;test-matrix-ptr STA2
  ;test-matrix-get-at [ ;test-matrix-w LDA2 ] [ ;test-matrix-h LDA2 ] ;dump-matrix JSR2
  RTN

( s* -- )
@test-parse-matrix
  ;make-get-byte JSR2
  ( get-byte )

  ;test-matrix ;parse-matrix JSR2
  ( w h )

  ;test-matrix [ ;test-matrix-ptr STA2 ]
  STH2 STH2 ;test-matrix-get-at STHr2 STHr2
  ( get-at w h )

  DUP2 [ ;test-matrix-h STA2 ]
  OVR2 [ ;test-matrix-w STA2 ]

  ;dump-matrix JSR2

  RTN

( x* w h -- )
@test-process-matrix
  [ ;test-matrix-h STA2 ]
  [ ;test-matrix-w STA2 ]
  ;test-matrix-ptr STA2

  ;test-basin-sizes ;test-matrix-get-at [ ;test-matrix-w LDA2 ] [ ;test-matrix-h LDA2 ] ;process-matrix JSR2

  P< "sizes= >P
  ;test-basin-sizes ;dump-short-list JSR2
  LF
  RTN

( x y -- b )
@test-matrix-get-at
  [ ;test-matrix-w LDA2 ] MUL2 ADD2 [ ;test-matrix-ptr LDA2 ] ADD2 LDA
  RTN

( b x y -- )
@test-matrix-set-at
  [ ;test-matrix-w LDA2 ] MUL2 ADD2 [ ;test-matrix-ptr LDA2 ] ADD2 STA
  RTN

( w*h must be even )
( matrix* w h -- )
@clear-matrix
  MUL2 2// STH2 ( matrix* : wordcount )
  ( clear matrix )
  &loop
    #0000 OVR2 STA2
    ( advance pointer )
    #0002 ADD2
    ( matrix* : count )
    DEC2r STH2rk #0000 NEQ2 ,&loop JCN
  ( matrix* : count )
  POP2r
  POP2
  RTN

@input $2

@test-matrix-ptr $2
@test-matrix-w $2
@test-matrix-h $2

@test-matrix $1000

@sample-matrix
  10 10 10 10 10 10 10 10 10 10 10 10
  10 02 01 09 09 09 04 03 02 01 00 10
  10 03 09 08 07 08 09 04 09 02 01 10
  10 09 08 05 06 07 08 09 08 09 02 10
  10 08 07 06 07 08 09 06 07 08 09 10
  10 09 08 09 09 09 06 05 06 07 08 10
  10 10 10 10 10 10 10 10 10 10 10 10
@sample-matrix-w 000c
@sample-matrix-h 0007

|ff00 @test-basin-sizes $100
