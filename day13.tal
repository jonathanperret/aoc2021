~library/macros.tal
~library/devices.tal

( variables )

|0000

( init )

|0100 @program
  ;on-arg-char .Console/vector DEO2
  BRK !

@on-arg-char
  .Console/read DEI ( char )
  DUP #0a EQU ,&complete JCN
  ;argv #00 ,&argptr LDR ADD2 STA
  ,&argptr LDR INC ,&argptr STR
  BRK !

  &complete
  POP

  ;arg-received JMP2

  &argptr $1

@argv        $20

( arg is in @argv )
@arg-received
  LIT ': EMIT
  ;argv ;print JSR2
  LF

  ;open-file JSR2

  ;read-byte ;parse-lines JSR2
  ;dump-dots JSR2
  ;dump-folds JSR2

  ;process-folds JSR2

  ;dump-dots JSR2

  ;draw-dots JSR2

  &done
  BRK

  [ &result $2 ]

@open-file
  ;argv .File/name DEO2
  #0001 .File/length DEO2
  RTN

( -- next-byte )
@read-byte
  #00 ;&byte STA ( clear byte so that EOF reads as zero )
  ;&byte .File/read DEO2
  LIT &byte 00 ( <- this byte is patched by the two previous instructions! )
  RTN

@draw-dots
  LIT 20 #0006 #0040 MUL2 ;matrix ;memset JSR2
  ;dots
  #0000 STH2
  ( dots* : cnt )
  &next
    LDA2k ( dots* x )
    DUP2 #ffff EQU2 ,&done JCN

    STH2
    ( dots* : x )
    DUP2 2++ LDA2
    ( dots* y : x )
    #0040 MUL2
    ( dots* y*64 : x )
    STH2r
    ( dots* y*64 x )
    ADD2
    ( dots* y*64+x )
    ;matrix ADD2
    ( dots* matrix+y*64+x )
    STH2 LIT '# STH2r STA

    INC2r
    4++
    ,&next JMP
  &done
  ( dots* ffff )
  POP2 POP2
  LIT 0a ;matrix #0040 ADD2 DEC2 STA
  LIT 0a ;matrix #0080 ADD2 DEC2 STA
  LIT 0a ;matrix #00c0 ADD2 DEC2 STA
  LIT 0a ;matrix #0100 ADD2 DEC2 STA
  LIT 0a ;matrix #0140 ADD2 DEC2 STA
  LIT 0a ;matrix #0180 ADD2 DEC2 STA
  LIT 0a ;matrix #01c0 ADD2 DEC2 STA
  ;matrix ;print JSR2
  LF
  RTN

@matrix $1000


~day13_lib.tal
