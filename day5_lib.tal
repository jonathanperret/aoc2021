( get-byte list* -- max )
@parse-line
  ;&list STA2
  ( patch call site )
  ;&get-byte STA2

  #0000 ,&max STR2

  #00 ,&started STR
  LIT2r 0000 ( : num )
  &next-byte
    LIT2 [ &get-byte $2 ] JSR2 ( b )
    DUP #0a EQU ,&done JCN
    DUP #00 EQU ,&done JCN
    DUP #30 LTH ,&next-number JCN
    DUP #39 GTH ,&next-number JCN

    #01 ,&started STR
    ( b : num )
    #30 SUB
    ( digit-val : num )
    LIT2r 000a MUL2r ( digit-val : num*10 )
    LITr 00 STH ADD2r
    ,&next-byte JMP

    &next-number
    POP
    STH2r ,&append_if_started JSR
    #00 ,&started STR
    LIT2r 0000 ( : num )
    ,&next-byte JMP

  &done
  POP
  ( append final number )
  STH2r ,&append_if_started JSR
  ( append terminator )
  #ffff ,&list LDR2 STA2
  ,&max LDR2
  RTN

  [ &list $2 &started $1 &max $2 ]

  ( num -- )
  &append_if_started
    ,&started LDR ,&append JCN
    POP2
    RTN

  ( num -- )
  &append
    DUP2 ,&max LDR2 ( num num max )
    LEQ2 ,&not-new-max JCN
      DUP2 ,&max STR2
    &not-new-max
    ,&list LDR2 STA2
    ,&list LDR2 INC2 INC2 ,&list STR2
    RTN

( list -- )
@dump-short-list
  &loop
    DUP2 LDA2
    DUP2 #ffff EQU2 ,&done JCN
    ;print-short-decimal JSR2 SP
    INC2 INC2
    ,&loop JMP
  &done
  POP2 POP2
  LF
  RTN

( get-byte list* -- )
@parse-lines
  STH2 ( : list* )
  ( patch call site )
  ;&get-byte STA2

  #0000 ,&max STR2

  &loop
    ( clear terminator )
    #0000 STH2rk STA2
    LIT2 [ &get-byte $2 ] STH2rk ;parse-line JSR2
    ( line-max )

    DUP2 ,&max LDR2 ( line-max line-max max )
    LEQ2 ,&not-new-max JCN
      DUP2 ,&max STR2
    &not-new-max
    POP2

    ( check for empty list )
    #ffff STH2rk LDA2 EQU2 ,&done JCN
    ( advance pointer )
    LIT2r 0008 ADD2r
    ,&loop JMP
  &done
  POP2r
  ,&max LDR2
  RTN
  [ &max $2 ]

( get-at w h -- )
@dump-matrix
  [ ,&h STR2 ]
  [ ,&w STR2 ]
  [ ,&get-at STR2 ]
  LIT2r 0000 ( : y )
  &row-loop
    #0000 ( x : y )
    &col-loop
      DUP2 STH2rk LIT2 [ &get-at $2 ] JSR2
      DUP ,&not-zero JCN
        POP #fe ( fe+30 = '.' )
      &not-zero
      #30 ADD EMIT
      INC2 ( x+1 : y )
      DUP2 [ ,&w LDR2 ] LTH2 ,&col-loop JCN
    POP2 ( : y )
    LF
    INC2r ( : y+1 )
    STH2rk [ ,&h LDR2 ] LTH2 ,&row-loop JCN
  ( : y )
  POP2r
  RTN
  [ &w $2 &h $2 ]

( line* -- y1 y2 x1 x2 )
@get-points-in-order
  STH2 ( : line* )
  STH2rk #0002 ADD2 LDA2 ( y1 )
  STH2rk #0006 ADD2 LDA2 ( y1 y2 )
  STH2rk #0000 ADD2 LDA2 ( y1 y2 x1 : line* )
  STH2rk #0004 ADD2 LDA2 ( y1 y2 x1 x2 : line* )
  POP2r ( y1 y2 x1 x2 )

  LTH2k ,&not-x-swapped JCN
    STH2 STH2 ( y1 y2 : x1 x2 )
    SWP2r SWP2 ( y2 y1 : x2 x1 )
    STH2r STH2r ( y2 y1 x2 x1 )
  &not-x-swapped
  RTN

( get-at set-at line* -- )
@draw-line-into-matrix
  ( line* )
  ;get-points-in-order JSR2 ( y1 y2 x1 x2 )
  [ ;&x2 STA2 ]
  [ ;&x1 STA2 ]
  [ ;&y2 STA2 ]
  [ ;&y1 STA2 ]

  [ ;&set-at STA2 ]
  [ ;&get-at STA2 ]

  ( P< "x1= >P [ ;&x1 LDA2 ] DBGSHORTDECn POP2 SP P< "y1= >P [ ;&y1 LDA2 ] DBGSHORTDEC POP2
  P< "x2= >P [ ;&x2 LDA2 ] DBGSHORTDECn POP2 SP P< "y2= >P [ ;&y2 LDA2 ] DBGSHORTDEC POP2 )
  #0000 [ ;&xinc STA2 ]
  [ ;&x1 LDA2 ] [ ;&x2 LDA2 ] EQU2 ,&vertical JCN
    #0001 [ ;&xinc STA2 ]
  &vertical

  #0000 [ ;&yinc STA2 ]
  [ ;&y1 LDA2 ] [ ;&y2 LDA2 ] EQU2 ,&horizontal JCN
    #0001 [ ;&yinc STA2 ]
  [ ;&y1 LDA2 ] [ ;&y2 LDA2 ] LTH2 ,&increasing-y JCN
    #ffff [ ;&yinc STA2 ]
  &increasing-y
  &horizontal

  ( P< "xinc= >P [ ;&xinc LDA2 ] DBGSHORTDECn POP2 SP P< "yinc= >P [ ;&yinc LDA2 ] DBGSHORTDEC POP2 )
  [ ;&x2 LDA2 ] [ ;&xinc LDA2 ] ADD2 [ ;&x2 STA2 ]
  [ ;&y2 LDA2 ] [ ;&yinc LDA2 ] ADD2 [ ;&y2 STA2 ]
  ( P< "x2= >P [ ;&x2 LDA2 ] DBGSHORTDECn POP2 SP P< "y2= >P [ ;&y2 LDA2 ] DBGSHORTDEC POP2 )

  [ ;&x1 LDA2 ] [ ;&y1 LDA2 ] STH2 ( x : y )
  &x-loop
    ( get cell at x,y )
    DUP2 STH2rk LIT2 [ &get-at $2 ] JSR2 ( x b : y )
    ( increase cell )
    INC ( x b+1 )
    ( set cell at x,y )
    #00 SWP OVR2 STH2rk ( x 00 b x y : y )
    LIT2 [ &set-at $2 ] JSR2 ( x 00 : y ) POP ( x : y )

    ( advance x )
    [ ;&xinc LDA2 ] ADD2
    ( advance y )
    [ ;&yinc LDA2 ] STH2 ADD2r
    ( loop if x!=x2 or y!=y2 )
    DUP2 [ ;&x2 LDA2 ] NEQ2   ( x x!=x2 : y )
    STH2rk [ ;&y2 LDA2 ] NEQ2 ( x x!=x2 y!=y2 : y )
    ORA ( x x!=x2||y!=y2 : y ) ;&x-loop JCN2
  POP2r
  POP2
  RTN
  [ &x1 $2 &y1 $2 &x2 $2 &y2 $2 &xinc $2 &yinc $2 ]

( get-at set-at lines* -- )
@draw-lines-into-matrix
  &next-line
    LDA2k ( get-at set-at lines* x1 )
    #ffff EQU2 ,&lines-done JCN

    ( get-at set-at lines* )

    DUP6 ;draw-line-into-matrix JSR2

    ( get-at set-at lines* )
    #0008 ADD2
    ,&next-line JMP
  &lines-done

  ( get-at set-at lines* )
  POP2 POP2 POP2
  RTN

( get-at w h -- count )
@count-matrix-crossings
  [ ,&h STR2 ]
  [ ,&w STR2 ]
  [ ,&get-at STR2 ]
  #0000 [ ,&result STR2 ]
  LIT2r 0000 ( : y )
  &row-loop
    #0000 ( x : y )
    &col-loop
      DUP2 STH2rk LIT2 [ &get-at $2 ] JSR2
      #02 LTH ,&not-crossing JCN
        [ ,&result LDR2 ] INC2 [ ,&result STR2 ]
      &not-crossing
      INC2 ( x+1 : y )
      DUP2 [ ,&w LDR2 ] LTH2 ,&col-loop JCN
    POP2 ( : y )
    INC2r ( : y+1 )
    STH2rk [ ,&h LDR2 ] LTH2 ,&row-loop JCN
  ( : y )
  POP2r
  [ ,&result LDR2 ]
  RTN
  [ &w $2 &h $2 &result $2 ]

( lines* max -- count )
@eval-matrix
  INC2 [ ,&size STR2 ]
  [ ,&lines STR2 ]

  [ ,&size LDR2 ] DUP2 ( size size )
  ;paged-matrix-init JSR2

  ;paged-matrix-get-at ;paged-matrix-set-at [ ,&lines LDR2 ] ;draw-lines-into-matrix JSR2

  ;paged-matrix-get-at [ ,&size LDR2 ] DUP2 ;dump-matrix JSR2

  ;paged-matrix-get-at [ ,&size LDR2 ] DUP2 ;count-matrix-crossings JSR2
  RTN
  [ &size $2 &lines $2 ]

( x y -- b )
@paged-matrix-get-at
  ;paged-matrix-address JSR2 ( pagenum offset )
  ;paged-get JSR2
  RTN

( b x y -- )
@paged-matrix-set-at
  ;paged-matrix-address JSR2 ( b pagenum offset )
  ;paged-set JSR2
  RTN

( w h -- )
@paged-matrix-init
  DEC2 SWP2 DEC2 SWP2 ( w-1 h-1 )
  ;paged-matrix-address JSR2 ( pagenum offset )
  POP2 ( pagenum )
  INC2 ( pagenum+1 )
  ;paging-init JSR2
  RTN

( x y -- pagenum offset )
@paged-matrix-address
  DUP2 10// STH2 ( x y : y/16 )
  10MOD2 #a0 SFT2 ADD2 ( x+(y%16)*1024 : y/16 )
  STH2r SWP2 ( pagenum=y/16 offset=(y%16)*1024+x )
  RTN

~library/console.lib.tal
~library/string.tal
~library/math.tal
~library/paging.tal
