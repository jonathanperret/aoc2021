~library/console.lib.tal
~library/string.tal
~library/math.tal

%TERMINATOR { #8000 }

@scanner
  ( get-byte sc* -- count )
  &parse
    [ ;&parse/sc STA2 ]
    [ ;&parse/get-byte-addr STA2 ]

    ;&parse/skip-line JSR2

    #00 [ ;&parse/count STA ]

    &parse/line-loop
      ;&parse/number JSR2 NOT ;&parse/done JCN2
      [ ;&parse/count *INC ]

      ;&parse/append JSR2

      ;&parse/number JSR2 POP
      ;&parse/append JSR2

      ;&parse/number JSR2 POP
      ;&parse/append JSR2

      ;&parse/line-loop JMP2

    &parse/done
    ( 0000 )
    POP2
    TERMINATOR [ ;&parse/sc LDA2 ] STA2

    [ ;&parse/count LDA ]
    RTN
    [ &parse/sc $2 &parse/count $1 ]

    ( -- b )
    &parse/get-byte
      LIT2 [ &parse/get-byte-addr $2 ] JMP2

    ( -- )
    &parse/skip-line
      &parse/skip-line/loop
        ;&parse/get-byte JSR2
        #0a NEQ ,&parse/skip-line/loop JCN
      RTN

    ( -- n success )
    &parse/number
      LIT2r 0000 ( : n )
      #00 [ ;&parse/number/started STA ]
      #0001 [ ;&parse/number/sign STA2 ]
      &parse/number/loop
        ;&parse/get-byte JSR2
        DUP LIT '- LTH ,&parse/number/done JCN
        DUP LIT '- NEQ ,&parse/number/positive JCN
          #ffff [ ;&parse/number/sign STA2 ]
          POP
          ,&parse/number/loop JMP
          &parse/number/positive
        LIT '0 SUB #00 SWP ( value : n )
        STH2r #000a MUL2 ADD2 STH2 ( : n*10+value )
        #01 [ ;&parse/number/started STA ]
        ,&parse/number/loop JMP
      &parse/number/done
      ( terminator )
      POP
      STH2r
      [ ;&parse/number/sign LDA2 ] MUL2
      [ ;&parse/number/started LDA ]
      RTN
      [ &parse/number/sign $2 &parse/number/started $1 ]

    ( n -- )
    &parse/append
      [ ;&parse/sc LDA2 ] STA2
      [ ;&parse/sc *2++ ]
      RTN

  ( sc* -- )
  &dump
    ( sc* )
    &dump/loop
      LDA2k TERMINATOR EQU2 ,&dump/done JCN
      DUP2 ;vector3/print JSR2 LF
      #0006 ADD2
      ,&dump/loop JMP
    &dump/done
    POP2
    RTN

@vector3
  ( v* -- )
  &print
    LDA2k ;print-short-decimal/signed JSR2 #0002 ADD2 SP
    LDA2k ;print-short-decimal/signed JSR2 #0002 ADD2 SP
    LDA2  ;print-short-decimal/signed JSR2
    RTN

@scanners
  ( get-byte -- )
  &parse
    #0000 [ ;&count STA2 ]
    LIT2r :&scannersbuf
    ( get-byte : scannersbuf* )
    &parse/loop
      DUP2 STH2rk ;scanner/parse JSR2
      ( count )
      DUP NOT ;&parse/done JCN2
      ( count )

      ( store current pointer in scanners array )
      STH2rk ;&scanners [ ;&count LDA2 ] 2** ADD2 STA2

      ( count )

      ( bump pointer by scanner size )
      #00 SWP #0006 MUL2 2++ STH2r ADD2 STH2 ( : scannersbuf+6*count* )

      [ ;&count *INC2 ]
      ;&parse/loop JMP2

    &parse/done
    ( get-byte count : scannersbuf* )
    POP POP2 POP2r
    RTN

  ( -- )
  &dump
    [ ;&count LDA2 ] #0000 NEQ2 ,&dump/not-zero JCN
      RTN
    &dump/not-zero
    #0000 [ ;&count LDA2 ] DO
      DUP2 ;print-short-decimal JSR2 LIT ': EMIT LF
      DUP2 2** ;&scanners ADD2 LDA2 ;scanner/dump JSR2
    LOOP
    RTN

  [ &count $2 &scannersbuf $2000 &scanners $40 ]
