( From https://wiki.xxiivv.com/site/uxntal_macros.html )

( Generics )

%NOT { #00 EQU }

%POP4 { POP2 POP2 }
%DUP4 { OVR2 OVR2 }
%DUP6 { ROT2k ROT2 ROT2 }

( Fast Arithmetic )

%2*  { #10 SFT } %2/  { #01 SFT }
%2*r { LITr 10 SFTr }
%4*  { #20 SFT } %4/  { #02 SFT }
%8*  { #30 SFT } %8/  { #03 SFT }
%10* { #40 SFT } %10/ { #04 SFT }
%20* { #50 SFT } %20/ { #05 SFT }

%2**  { #10 SFT2 } %2//  { #01 SFT2 }
%2**r { LITr 10 SFT2r }
%4**  { #20 SFT2 } %4//  { #02 SFT2 }
%8**  { #30 SFT2 } %8//  { #03 SFT2 }
%10** { #40 SFT2 } %10// { #04 SFT2 }
%20** { #50 SFT2 } %20// { #05 SFT2 }

%2MOD  { #01 AND } %2MOD2  { #0001 AND2 }
%4MOD  { #03 AND } %4MOD2  { #0003 AND2 }
%8MOD  { #07 AND } %8MOD2  { #0007 AND2 }
%10MOD { #0f AND } %10MOD2 { #000f AND2 }
%20MOD { #10 AND } %20MOD2 { #0010 AND2 }

%DEC { #01 SUB } %DEC2 { #0001 SUB2 }
%DECk { DUP #01 SUB } %DEC2k { DUP2 #0001 SUB2 }
%DECr { LITr 01 SUBr } %DEC2r { LIT2r 0001 SUB2r }

%2++  { #0002 ADD2 }
%2++r { LIT2r 0002 ADD2r }
%2-- { #0002 SUB2 }
%4++ { #0004 ADD2 }

( Signed arithmetic )
%NEG2 { #0000 SWP2 SUB2 }

( compute a-b, check if result is > 0 )
( OVR2 ;print-short-decimal/signed JSR2 LIT '> EMIT DUP2 ;print-short-decimal/signed JSR2 LIT '? EMIT SP )
%SGTH2 {
  SUB2 DEC2 #8000 LTH2
}
%SGTH2k {
  DUP4 SGTH2
}

( Multi-byte ops )

%LDA4 {
  LDA2
  STH2 DUP2 2++ LDA2 STH2r
}
%STA4 {
  STH2 SWP2 STH2rk STA2
  STH2r 2++ STA2
}
%STH4 { STH2 STH2 }
%STH4r { STHr2 STHr2 }

( Variable ops )

%*INC  { LDAk  INC  ROT ROT STA }
%*INC2 { LDAk2 INC2 SWP2 STA2 }
%*DEC  { LDAk  DEC  ROT ROT STA }
%*DEC2 { LDAk2 DEC2 SWP2 STA2 }
%*2++  { LDAk2 2++ SWP2 STA2 }
%*2--  { LDAk2 2-- SWP2 STA2 }
%*4++  { LDAk2 4++ SWP2 STA2 }
%*ADD  { LDAk  STH ROT STHr ADD ROT ROT STA }

( Buttons )

%B_UP { #10 } %B_DOWN { #20 } %B_LEFT   { #40 } %B_RIGHT { #80 }
%B_A  { #01 } %B_B    { #02 } %B_SELECT { #04 } %B_START { #08 }

( Binary Opcodes )

%ROL { DUP #07 SFT SWP #10 SFT + }
%ROR { DUP #70 SFT SWP #01 SFT + }

( Signed Opcodes )

%LTS2 { #8000 ++ SWP2 #8000 ++ >> }
%GTS2 { #8000 ++ SWP2 #8000 ++ << }
%ABS2 { DUP2 #0f SFT2 = #05 JCN #0000 SWP2 -- }

( Modulo/MinMax )

%MOD  { DIVk MUL SUB }
%MOD2 { DIV2k MUL2 SUB2 }
%MIN2 { LTH2k JMP SWP2 POP2 }
%MAX2 { GTH2k JMP SWP2 POP2 }

( ASCII )

( To test for character types. )

%IS-SPACER   { #21 < } ( char -- flag )
%IS-LABEL    { STHk #40 = STHr #26 = #0000 !! } ( char -- flag )
%IS-ALPHA-LC { STHk #60 > STHr #7b < #0101 == } ( char -- flag )
%IS-ALPHA-UC { STHk #40 > STHr #5b < #0101 == } ( char -- flag )
%IS-ALPHA    { DUP IS-ALPHA-UC SWP IS-ALPHA-LC #0000 !! } ( char -- flag )
%IS-NUMBER   { STHk #2f > STHr #3a < #0101 == } ( char -- flag )
%IS-ALPHANUM { DUP IS-ALPHA SWP IS-NUMBER #0000 !! } ( char -- flag )

%EMIT { .Console/write DEO }
%SP { #20 EMIT }
%LF { #0a EMIT }

%DBGBYTE { DBGBYTEn LF }
%DBGBYTEn { DUP ;print-byte JSR2 }

%DBGBYTEDEC { DBGBYTEDECn LF }
%DBGBYTEDECn { DUP #00 SWP ;print-short-decimal JSR2 }

%DBGSHORTn { DUP2 ;print-short JSR2 }
%DBGSHORT { DBGSHORTn LF }
%DBGSHORTDECn { DUP2 ;print-short-decimal JSR2 }
%DBGSHORTDEC { DBGSHORTDECn LF }
%DBGSHORTCHAR { OVR EMIT DUP EMIT }

%DBGCHAR { DUP EMIT LF }
%DBGSTACK { #0101 #0e DEO2 }
%BREAKPOINT { DBGSTACK BRK }
%! { BREAKPOINT }

%RTN { JMP2r }
%PRINT { ;print JSR2 }

%GEQ { LTH NOT } %GEQ2 { LTH2 NOT }
%GEQk { LTHk NOT } %GEQ2k { LTH2k NOT }
%LEQ { GTH NOT } %LEQ2 { GTH2 NOT }
%LEQk { GTHk NOT } %LEQ2k { GTH2k NOT }

( Fun with strings )

%S< { ;inline-str JSR2 } %>S { 00 }
%P< { S< }               %>P { >S ;print JSR2 }

( Testing )
%STKCHK { ;stkchk JSR2 }
%T< { STKCHK P< }
%>T { >P LF }

( Looping )
%HEREr { #00 JSR }
%DO { STH2 HEREr } ( i : do-addr max )
%LOOP {
  INC2
  OVR2r
  STH2k
  NEQ2r STHr
  STH2rk
  JCN2
  POP2 POP2r POP2r
}
(
                    [ i   : do-addr max ]
  INC2              [ i+1 : do-addr max ]
  OVR2r             [ i+1 : max do-addr max ]
  STH2k             [ i+1 : i+1 max do-addr max ]
  GTH2r STHr        [ i+1 i+1<max? : do-addr max ]
  STH2rk            [ i+1 i+1<max? do-addr : max ]
  JCN2              [ i+1 : do-addr max ]
  POP2 POP2r POP2r  [ ]
)
%UNLOOP { POP2 POP2r POP2r } ( clear DO state )

