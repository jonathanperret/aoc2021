~library/console.lib.tal
~library/string.tal
~library/math.tal

@step
  ( get-byte step* -- )
  &parse
    SWP2
    [ ;&get-byte-addr STA2 ]
    ( step* )

    ;&parse/get-byte JSR2 ,&not-eof JCN
      POP2
      #00
      RTN
      &not-eof

    DUP2 STEP.on #01 ROT ROT STA
    ;&parse/get-byte JSR2 LIT 'n EQU ,&parse/on JCN
      DUP2 STEP.on #00 ROT ROT STA
      ( eat second 'f' )
      ;&parse/get-byte JSR2 POP
    &parse/on

    ( step* )

    ( eat space x = )
    ;&parse/get-byte JSR2 POP
    ;&parse/get-byte JSR2 POP
    ;&parse/get-byte JSR2 POP

    ( parse xmin )
    DUP2 STEP.xmin ;&parse/number JSR2

    ( eat dot )
    ;&parse/get-byte JSR2 POP

    ( parse xmax )
    DUP2 STEP.xmax ;&parse/number JSR2

    ( eat y = )
    ;&parse/get-byte JSR2 POP
    ;&parse/get-byte JSR2 POP

    ( parse ymin )
    DUP2 STEP.ymin ;&parse/number JSR2

    ( eat dot )
    ;&parse/get-byte JSR2 POP

    ( parse ymax )
    DUP2 STEP.ymax ;&parse/number JSR2

    ( eat z = )
    ;&parse/get-byte JSR2 POP
    ;&parse/get-byte JSR2 POP

    ( parse zmin )
    DUP2 STEP.zmin ;&parse/number JSR2

    ( eat dot )
    ;&parse/get-byte JSR2 POP

    ( parse zmax )
    DUP2 STEP.zmax ;&parse/number JSR2

    ( step* )
    POP2
    #01
    RTN

    ( -- b )
    &parse/get-byte
      LIT2 [ &get-byte-addr $2 ] JMP2

    ( step* -- )
    &parse/number
      #01 [ ;&parse/positive STA ]
      [ ;&parse/str ] ( step* s* )
      ;&parse/get-byte JSR2 STH ( step* s* : b )
      STH2k STArk POP2r INC2 ( step* s* : b )
      STHr LIT '- NEQ ,&parse/no-sign JCN
        #00 [ ;&parse/positive STA ]
        DEC2
      &parse/no-sign

      ( step* s* )
      &parse/next-digit
        ;&parse/get-byte JSR2 STH ( step* s* : b )
        STH2k STArk POP2r INC2 ( step* s* : b )
        STHr LIT '0 GEQ ,&parse/next-digit JCN

      ( step* s* )
      DEC2 #00 ROT ROT STA

      ( step* )
      DUP2 ;&parse/str ;parse64 JSR2

      [ ;&parse/positive LDA ] ,&parse/no-negate JCN
        DUP2 ;negate64 JSR2
      &parse/no-negate
      POP2

      RTN
      [ &parse/str $10 &parse/positive $1 ]


  ( step* -- )
  &dump
    LIT '{ EMIT SP
    DUP2 LDA #01 EOR #0b MUL LIT '# ADD EMIT SP

    LIT '[ EMIT
    DUP2 STEP.xmin ;print64/no-pad JSR2
    LIT '. EMIT LIT '. EMIT
    DUP2 STEP.xmax ;print64/no-pad JSR2
    LIT '[ EMIT SP

    LIT '[ EMIT
    DUP2 STEP.ymin ;print64/no-pad JSR2
    LIT '. EMIT LIT '. EMIT
    DUP2 STEP.ymax ;print64/no-pad JSR2
    LIT '[ EMIT SP

    LIT '[ EMIT
    DUP2 STEP.zmin ;print64/no-pad JSR2
    LIT '. EMIT LIT '. EMIT
    DUP2 STEP.zmax ;print64/no-pad JSR2
    LIT '[ EMIT SP

    DUP2 STEP.active LDA DUP #00 EQU ,&dump/not-active JCN
      DUP LIT '0 ADD EMIT SP
    &dump/not-active
    POP

    LIT '} EMIT
    POP2
    RTN

@steps
  ( get-byte -- )
  &parse
    [ ;&parse/get-byte STA2 ]

    ;&xevents ;eventlist/init JSR2
    ;&yevents ;eventlist/init JSR2
    ;&zevents ;eventlist/init JSR2

    ;&steps ( steps* )
    &parse/more
      LIT2 [ &parse/get-byte $2 ] OVR2 ;step/parse JSR2 NOT ;&parse/done JCN2

      ( steps* )

      ( bump maxes, to have open intervals on the right )
      DUP2 STEP.xmax #01 ;add64-byte JSR2
      DUP2 STEP.ymax #01 ;add64-byte JSR2
      DUP2 STEP.zmax #01 ;add64-byte JSR2

      STH2k ( steps* : steps* )
      ( el* active x* step* -- )
      ;&xevents #01 [ STH2rk STEP.xmin ] STH2rk ;eventlist/insert JSR2
      ;&xevents #ff [ STH2rk STEP.xmax ] STH2rk ;eventlist/insert JSR2
      ;&yevents #01 [ STH2rk STEP.ymin ] STH2rk ;eventlist/insert JSR2
      ;&yevents #ff [ STH2rk STEP.ymax ] STH2rk ;eventlist/insert JSR2
      ;&zevents #01 [ STH2rk STEP.zmin ] STH2rk ;eventlist/insert JSR2
      ;&zevents #ff [ STH2rk STEP.zmax ] STH2rk ;eventlist/insert JSR2
      POP2r

      STEPSIZE ADD2
      ;&parse/more JMP2

    &parse/done

    ( terminate list )
    DUP2 TERMINATOR ROT ROT STA
    [ ;&steps-end STA2 ]

    RTN

  ( -- )
  &dump
    ;&dump/one ;&foreach JSR2
    P< "x: 0a >P
    ;&xevents ;eventlist/dump JSR2
    P< "y: 0a >P
    ;&yevents ;eventlist/dump JSR2
    P< "z: 0a >P
    ;&zevents ;eventlist/dump JSR2
    RTN

    ( step* -- )
    &dump/one
      ;step/dump JSR2 LF
      RTN

  ( [ step* -- ] -- )
  &foreach
    [ ;&foreach/fn STA2 ]
    ;&steps ( steps* )
    &foreach/loop
      LDAk TERMINATOR EQU ,&foreach/done JCN
      ( steps* )
      DUP2 LIT2 [ &foreach/fn $2 ] JSR2
      STEPSIZE ADD2
      ,&foreach/loop JMP
    &foreach/done
    ( steps* )
    POP2
    RTN

  ( [ step* -- continue ] -- )
  &rfind
    [ ;&rfind/fn STA2 ]
    [ ;&steps-end LDA2 ] ( steps* )
    &rfind/loop
      STEPSIZE SUB2
      DUP2 ;&steps LTH2 ,&rfind/done JCN
      ( steps* )
      DUP2 LIT2 [ &rfind/fn $2 ] JSR2 ,&rfind/loop JCN
    &rfind/done
    ( steps* )
    POP2
    RTN

  [ &steps $6000 &steps-end $2 &xevents $1200 &yevents $1200 &zevents $1200 ]

  ( xmin* xmax* ymin* ymax* z* -- )
  &draw
    [ ;&draw/z* STA2 ]
    [ ;&draw/ymax* STA2 ]
    [ ;&draw/ymin* STA2 ]
    [ ;&draw/xmax* STA2 ]
    [ ;&draw/xmin* STA2 ]
    ;&draw/one ;&foreach JSR2
    RTN
    [ &draw/z* $8 &draw/xmin* $8 &draw/xmax* $8 &draw/ymin* $8 &draw/ymax* $8 ]

    ( step* -- )
    &draw/one
      [ ;&draw/step* STA2 ]

      [ ;&draw/z* LDA2 ] [ [ ;&draw/step* LDA2 ] STEP.zmin ] ;geq64 JSR2 NOT ;&draw/z-out JCN2
      [ [ ;&draw/step* LDA2 ] STEP.zmax ] [ ;&draw/z* LDA2 ] ;geq64 JSR2 NOT ;&draw/z-out JCN2

      ;&draw/ystart [ ;&draw/step* LDA2 ] STEP.ymin ] [ ;&draw/ymin* LDA2 ] ;sub64 JSR2
      ;&draw/yend [ ;&draw/step* LDA2 ] STEP.ymax ] [ ;&draw/ymin* LDA2 ] ;sub64 JSR2

      ;&draw/xstart [ ;&draw/step* LDA2 ] STEP.xmin ] [ ;&draw/xmin* LDA2 ] ;sub64 JSR2
      ;&draw/xend [ ;&draw/step* LDA2 ] STEP.xmax ] [ ;&draw/xmin* LDA2 ] ;sub64 JSR2

      [ [ ;&draw/step* LDA2 ] STEP.on LDA ] [ ;&draw/byte STA ]

      [ ;&draw/ystart LDA2 SWP ] ( ystart )
      [ ;&draw/yend LDA2 SWP ] ( yend )
      DO
        [ ;&draw/xstart LDA2 SWP ] ( xstart )
        [ ;&draw/xend LDA2 SWP ] ( xend )
        DO
          ( y x )
          OVR2 STH2 STH2k ( y x : x y )
          LIT [ &draw/byte $1 ] STH2r STH2r ;matrix/set-at JSR2
        LOOP
      LOOP
      RTN

      &draw/z-out
        ( step* )
        RTN

      [ &draw/step* $2
        &draw/xstart $8 &draw/xend $8
        &draw/ystart $8 &draw/yend $8
      ]

@matrix
  ( w h -- )
  &init
    [ ;&h STA2 ]
    [ ;&w STA2 ]
    #00 MATSIZE ;&mat ;memset JSR2
    RTN

  ( x y -- )
  &get-at
    [ ;&w LDA2 ] MUL2 ADD2
    ;&mat ADD2 LDA
    RTN

  ( b x y -- )
  &set-at
    DUP2 [ ;&h LDA2 ] GEQ2 ,&set-at/outside JCN
    OVR2 [ ;&w LDA2 ] GEQ2 ,&set-at/outside JCN

    [ ;&w LDA2 ] MUL2 ADD2
    ;&mat ADD2 STA
    RTN

    &set-at/outside
    POP2 POP2 POP RTN

  ( -- )
  &dump
    #0000 [ ;&h LDA2 ] DO
      ( draw flipped on y )
      [ ;&h LDA2 ] DEC2 OVR2 SUB2
      #0000 [ ;&w LDA2 ] DO
        DUP4 SWP2 ;&get-at JSR2 STH
        LIT '#
        STHr ,&dump/set JCN
          POP LIT '.
          &dump/set
        EMIT
      LOOP
      LF
      POP2
    LOOP
    RTN

  ( -- cnt )
  &count

    #0000 [ ;&total STA2 ]
    #0000 [ ;&h LDA2 ] DO
      #0000 [ ;&w LDA2 ] DO
        DUP4 SWP2 ;&get-at JSR2
        #00 SWP [ ;&total LDA2 ] ADD2 [ ;&total STA2 ]
      LOOP
    LOOP
    [ ;&total LDA2 ]
    RTN
    [ &total $2 ]

  [ &mat MATPAD &w $2 &h $2 ]

@event
  ( active x* step* -- )
  &dump
    STH2 STH2 ( active : x* step* )
    LIT '= SWP SUB EMIT SP
    STH2r ;print64/no-pad JSR2 SP
    STH2r ;step/dump JSR2 LF
    RTN

@eventlist
  ( el* -- )
  &init
    TERMINATOR2 SWP2 STA2
    RTN

  ( el* -- )
  &dump
    ;event/dump ;&foreach JSR2
    RTN

  ( el* [ active x* step* -- ] -- )
  &foreach
    STH2 ( el* : fn )
    &foreach/loop
      LDA2k TERMINATOR2 EQU2 ,&foreach/done JCN
      ( el* : fn )
      STH2k ( el* : el* fn )
      STH2rk [ EVENT.active LDA ]
      STH2rk [ EVENT.x* LDA2 ]
      STH2r  [ EVENT.step* LDA2 ]
      ( el* active x* step* : fn )
      STH2rk JSR2
      EVENTSIZE ADD2
      ,&foreach/loop JMP
    &foreach/done
    ( el* )
    POP2
    POP2r
    RTN

  ( el* active x* step* -- )
  &insert
    STH2 STH2k ( el* active x* : x* step* )
    [ ,&insert/x* STR2 ] ( el* active : x* step* )
    STH ( el* : active x* step* )

    &insert/loop
      LDA2k TERMINATOR2 EQU2 ,&insert/at-end JCN
      LDA2k ( event-x* )
      LIT2 [ &insert/x* $2 ] ( event-x* x* )
      ;geq64 JSR2 ( event-x>x? ) ,&insert/found JCN

      EVENTSIZE ADD2
      ,&insert/loop JMP
    &insert/at-end
    STHr STH2r STH2r ;&_write JSR2
    EVENTSIZE ADD2
    TERMINATOR2 SWP2 STA2
    ( el* )
    RTN

    &insert/found
    ( el* )
    ( shift right )
    DUP2 ;&_shift-right JSR2
    STHr STH2r STH2r ;&_write JSR2
    ( el* )
    POP2
    RTN

  ( el* -- )
  &_shift-right
    ( scan to end )
    DUP2
    ( el* el-end* )
    &_shift-right/scan-loop
      LDA2k ( el* el-end* word )
      TERMINATOR2 EQU2 ,&_shift-right/at-end JCN
      EVENTSIZE ADD2
      ,&_shift-right/scan-loop JMP

    &_shift-right/at-end
    ( el* el-end* )
    ( grow list here )
    EVENTSIZE ADD2
    TERMINATOR2 OVR2 STA2

    ( now copy backwards until el-end = el )
    SWP2 STH2
    ( el-end* : el* )
    &_shift-right/copy-loop
      EVENTSIZE SUB2
      EQU2k ,&_shift-right/copy-done JCN
      ( copy left into right )
      DUP2 DUP2 EVENTSIZE SUB2
      ( el-end* el-end* [el-end - SIZE]* )
      SWP2 EVENTSIZE ;memcpy JSR2
      ,&_shift-right/copy-loop JMP

    &_shift-right/copy-done
    ( el-end* : el* )
    POP2r
    POP2
    RTN

  ( el* active x* step* -- el* )
  &_write
    STH2 STH2 STH ( el* : active x* step* )
    DUP2 EVENT.active STHr ROT ROT STA
    DUP2 EVENT.x* STH2r SWP2 STA2
    DUP2 EVENT.step* STH2r SWP2 STA2
    RTN

@sweeper
  &compute-total-volume
  &zsweep
    [ ;&startZ ;&int-min ;copy64 JSR2 ]
    [ ;&total-volume #0000 ;short-to-64 JSR2 ]
    ;steps/zevents ;&zsweep-on-event ;eventlist/foreach JSR2
    P< "total= >P ;&total-volume PRINT64 LF
    RTN

    ( active x* step* )
    &zsweep-on-event
      STH2 ( active z* : step* )
      ( P< "startZ= >P ;&startZ PRINT64 LF P< "eventZ= >P DUP2 EVENT.z* PRINT64 LF )
      ;&startZ OVR2 EVENT.z* ;geq64 JSR2 NOT
      ( eventZ>startZ? if so, process slab so far )
      ;&zsweep/process-slab JCN2

      &zsweep/next-event

      ( update step activity level )

      ( active z* : step* )
      POP2 STH2r
      ( active step* )
      ROT STH ( step* : active )
      STEP.active LDAk STHr ADD ( step.active* step.active+active )
      ROT ROT STA
      RTN

    ( event-z* -- event-z* )
    &zsweep/process-slab
      ( event-z* )
      DUP2 [ ;&endZ SWP2 ;copy64 JSR2 ]
      ;&endZ #01 ;sub64-byte JSR2

      ;&sizeZ ;&endZ ;&startZ ;sub64 JSR2
      ;&sizeZ #01 ;add64-byte JSR2

      ;&zsweep/trace JSR2

      ( do the y-sweep )
      ;&ysweep JSR2

      ( start new slab )
      DUP2 [ ;&startZ SWP2 ;copy64 JSR2 ]
      ;&zsweep/next-event JMP2

  &zsweep/trace
    [ ;&silent LDA ] ,&zsweep/trace/not JCN
    P< "z=[ >P
    ;&startZ PRINT64
    LIT '. EMIT LIT '. EMIT
    ;&endZ PRINT64
    LIT '] EMIT LIT '= EMIT
    ;&sizeZ PRINT64
    LF
    &zsweep/trace/not
    RTN

  ( -- )
  &ysweep
    [ ;&startY ;&int-min ;copy64 JSR2 ]
    ;steps/yevents ;&ysweep-on-event ;eventlist/foreach JSR2
    RTN

    ( active y* step* )
    &ysweep-on-event
      ( ignore events inactive for this slab )

      DUP2 STEP.active LDA ( step.active )
      #00 GTH ,&y-event-active JCN
        ( this event is inactive, move on )
        POP2 POP2 POP RTN
      &y-event-active

      STH2 ( active z* : step* )
      ( P< 20 "startY= >P ;&startY PRINT64 LF P< 20 "eventY= >P DUP2 EVENT.z* PRINT64 LF )

      ;&startY OVR2 EVENT.y* ;geq64 JSR2 NOT
      ( eventY>startY? if so, process slab so far )
      ;&ysweep/process-row JCN2

      &ysweep/next-event

      ( update step activity level )

      ( active y* : step* )
      POP2 STH2r
      ( active step* )
      ROT STH ( step* : active )
      STEP.active LDAk STHr ADD ( step.active* step.active+active )
      ROT ROT STA
      RTN

    &ysweep/process-row
      ( event-y* )
      DUP2 [ ;&endY SWP2 ;copy64 JSR2 ]
      ;&endY #01 ;sub64-byte JSR2

      ;&sizeY ;&endY ;&startY ;sub64 JSR2
      ;&sizeY #01 ;add64-byte JSR2

      ;&ysweep/trace JSR2

      ( do the x-sweep )
      ;&xsweep JSR2

      ( start new row )
      DUP2 [ ;&startY SWP2 ;copy64 JSR2 ]
      ;&ysweep/next-event JMP2

  &ysweep/trace
    [ ;&silent LDA ] ,&ysweep/trace/not JCN
    P< 20 "y=[ >P
    ;&startY PRINT64
    LIT '. EMIT LIT '. EMIT
    ;&endY PRINT64
    LIT '] EMIT LIT '= EMIT
    ;&sizeY PRINT64
    LF
    &ysweep/trace/not
    RTN

  &xsweep
    [ ;&startX ;&int-min ;copy64 JSR2 ]
    ;steps/xevents ;&xsweep-on-event ;eventlist/foreach JSR2
    RTN

    ( active x* step* )
    &xsweep-on-event
      ( ignore events inactive for this slab )

      DUP2 STEP.active LDA ( step.active )
      #01 GTH ,&x-event-active JCN
        ( this event is inactive, move on )
        ( active x* step* )
        ( P< 20 20 "skip 20 >P DUP2 ;step/dump JSR2 LF )
        POP2 POP2 POP RTN
      &x-event-active

      STH2 ( active x* : step* )
      ( P< 20 20 "startX= >P ;&startX PRINT64 LF P< 20 "eventX= >P DUP2 EVENT.z* PRINT64 LF )

      ;&startX OVR2 EVENT.x* ;geq64 JSR2 NOT
      ( eventX>startX? if so, process slab so far )
      ;&xsweep/process-segment JCN2

      &xsweep/next-event

      ( update step activity level )

      ( active x* : step* )
      POP2 STH2r
      ( active step* )
      ROT STH ( step* : active )
      STEP.active LDAk STHr ADD ( step.active* step.active+active )
      ROT ROT STA
      RTN

    &xsweep/process-segment
      ( event-x* )
      DUP2 [ ;&endX SWP2 ;copy64 JSR2 ]
      ;&endX #01 ;sub64-byte JSR2

      ;&sizeX ;&endX ;&startX ;sub64 JSR2
      ;&sizeX #01 ;add64-byte JSR2

      ;&xsweep/trace JSR2

      ( compute and add the volume )
      ;&add-volume JSR2

      ( start new segment )
      DUP2 [ ;&startX SWP2 ;copy64 JSR2 ]
      ;&xsweep/next-event JMP2

  &xsweep/trace
    [ ;&silent LDA ] ,&xsweep/trace/not JCN
    P< 20 20 "x=[ >P
    ;&startX PRINT64
    LIT '. EMIT LIT '. EMIT
    ;&endX PRINT64
    LIT '] EMIT LIT '= EMIT
    ;&sizeX PRINT64
    LF
    &xsweep/trace/not
    RTN

  ( -- )
  &add-volume
    ( find latest active step )
    #00 [ ;&add-volume/found STA ]
    ;&add-volume/on-step ;steps/rfind JSR2
    [ ;&add-volume/found LDA ] NOT ,&add-volume/not-found JCN
      ;&sizeY ;&sizeZ ;mul64 JSR2
      ;&sizeYZ ;mul64/get-lo JSR2

      ;&sizeYZ ;&sizeX ;mul64 JSR2
      ;&segment-volume ;mul64/get-lo JSR2

      ;&add-volume/trace JSR2

      ;&total-volume ;&segment-volume ;add64 JSR2
      &add-volume/not-found
    RTN

    [ &add-volume/found $1 ]

    ( step* -- continue )
    &add-volume/on-step
      DUP2 STEP.active LDA #03 LTH ,&add-volume/not-active JCN
        DUP2 STEP.on LDA [ ;&add-volume/found STA ]
        POP2 #00 RTN
      &add-volume/not-active
      POP2
      #01 RTN

    &add-volume/trace
      [ ;&silent LDA ] ,&add-volume/trace/not JCN
      P< 20 20 20 "+ >P
      ;&segment-volume PRINT64 LF
      &add-volume/trace/not
      RTN

  [ &int-min 00 00 00 ff ff ff ff ff
    &int-max ff ff ff 00 00 00 00 00
    &startZ $8 &endZ $8 &sizeZ $8
    &startY $8 &endY $8 &sizeY $8
    &sizeYZ $8
    &startX $8 &endX $8 &sizeX $8
    &segment-volume $8
    &total-volume $8
    &silent 00 ]

@axes "xyz
