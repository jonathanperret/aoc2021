1000 numbers (635 distinct values) between 0 and 2000.

The best position must be within the range of initial positions. Otherwise, there would be
a position one step closer to the pack that is cheaper.

Brute force: for each position between 0 and 2000, compute abs(pos - x) and sum, take min.

Does the best position have to be one of the crabs' initial position?


Each crab group at initial position X0 generates a cost function that is a broken line
bouncing on the X axis, whose slope is the group size:

Y ^
  |   $            !    *                 $
  |     $             !  *              $*                           !
  |       $              !*           $ *                         !
  |         $              *!       $  *                        !
  |           $             *  !  $   *                      !
  |             $            *  $ !  *                    !
  |               $           $     *!                 !
  |                 $       $  *   *    !           !
  |                   $   $     * *        !     !
   ---------------------$--------*------------!---------------------> X
                                 X0

The sum of these functions is a wavy broken line:

Y ^              ∑                               ∑
  |
  |                ∑                          ∑
  |
  |                   ∑                   ∑
  |
  |                     ∑              ∑
  | !              *       ∑         ∑
  |       !          *        ∑    ∑
  |             !      *         ∑
  |     $             !  *              $*                           !
  |         $              *!       $  *                        !
  |             $            *  $ !  *                    !
  |                 $       $  *   *    !           !
  |---------------------$--------*------------!---------------------> X

The curve has an equation of the form:
  y = |x-x1| + | x-x2 | + … + | x-xn |

Is it true that it "bounces" only once?
Going from -infinity towards +infinity, it starts sloping down, and for each crab group
encountered, its slope becomes more shallow, until we reach the minimum — since there
has to be an inflexion at the minimum, it has to be on a crab group! — and from there
the slope can only increase.

The "derivative" (defined only for continuous parts i.e. between groups) looks like:

Y ^
  |
  |                                           ∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂
  |
  |                              ∂∂∂∂∂∂∂∂∂∂∂∂∂
  |
  |---------------------$--------*------------!---------------------> X
  |
  |                     ∂∂∂∂∂∂∂∂∂
  |
  |∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂∂
  |
  |    -1-1/2-1/3      -1+1/2-1/3  1-1/2+1/3    1+1/2+1/3
  |      ~ -1.833        -0.833     0.833         1.833

The minimum is necessarily where the "derivative" crosses 0.

So, if we sort crabs by initial position:

  16 1 2 0 4 2 7 1 2 14

  0 1 1 2 2 2 4 7 14 16

Compute slopes (group sizes):

  0 1 1 2 2 2 4 7 14 16
  1 2   3     1 1 1  1
  1 2 3   1     1             1   1

The slope at -infinity is -(total number of crabs). Indeed, until we reach
the edge of the pack, for each step towards the pack the cost reduces by the
number of crabs.

Go through groups updating slope by adding 2*group size at each group (the
group goes from negative contributor to positive contributor)::

 x=             0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18
 s=             1   2   3       1           1                           1       1
 ∂=        -10  -8  -4  2       4           6                           8       10

 As soon as the slope gets positive we have reached our optimum, here x=2.
 We can get rid of the factor of two by starting with half the pack size as the
 initial slope:

 x=             0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18
 s=             1   2   3       1           1                           1       1
 ∂=        -5   -4  -2  1       2           3                           4       5

We don't even have to group crabs. If they are sorted, each one increments the slope by 1:

 x=         0   1      2          3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18
 c=         0   1  1   2  2  2        4           7                           14      16 
 ∂=    -5   -4  -3 -2  -1 0  1        2           3                           4       5

So:
  - sort crabs;
  - set ∂=-(crab count)/2;
  - for each crab:
    - ∂++;
    - if ∂>=0 return crab.

Looking at it, the return value will always be the value of the middle crab, i.e. the median
of the list.

Given 0 1 1 2 2 2 4 7 14 16, the median is indeed 2.

So:
  - sort crabs;
  - return median crab.

Is there an algorithm for computing the median of a set without sorting?

https://en.wikipedia.org/wiki/Quickselect

> Quickselect uses the same overall approach as quicksort, choosing one element
> as a pivot and partitioning the data in two based on the pivot, accordingly as
> less than or greater than the pivot. However, instead of recursing into both
> sides, as in quicksort, quickselect only recurses into one side – the side with
> the element it is searching for. This reduces the average complexity from
> \theta(n log n) to \theta(n) with a worst case of O(n^2).

> As with quicksort, quickselect is generally implemented as an in-place
> algorithm, and beyond selecting the kth element, it also partially sorts the
> data.

Sounds pretty good!

Wikipedia suggests the Lomuto partition scheme, but I think a safer bet
implementation-wise will be to drop the in-place requirement and just:

 - set targetIndex=floor((crab count)/2);
 - repeat:
   - pick list[0] as a pivot;
   - partition list into two new lists, smaller and larger (excluding pivot),
       returning smallerCount, pivotCount and largerCount;
   - if smallerCount > targetIndex:
     - copy smaller to list;
     - repeat.
     else:
     - targetIndex -= smallerCount;
     - if pivotCount > targetIndex:
       - return pivot.
       else:
         - targetIndex -= pivotCount;
         - copy larger to list;
         - repeat.

Checking: if initial list has a single element [x]:
  - targetIndex = 0;
  - pivot = x;
  - smaller=[], pivotCount=1, larger=[];
  - smallerCount(=0) <= targetIndex(=0) : skip;
  - targetCount -= smallerCount(=0) = 0;
  - pivotCount(=1) > targetIndex(=0), therefore
  - return pivot (=x).

If initial list has two elements [x,y]:
  - targetIndex = 0;
  - pivot = x;

  Three cases:
  1. x < y:
    - smaller=[], pivotCount=1, larger=[y];
    - smallerCount(=0) <= targetIndex(=0) : skip;
    - targetCount -= smallerCount(=0) = 0;
    - pivotCount(=1) > targetIndex(=0), therefore
    - return pivot (=x).
  2. x = y:
    - smaller=[], pivotCount=2, larger=[];
    - smallerCount(=0) <= targetIndex(=0) : skip;
    - targetCount -= smallerCount(=0) = 0;
    - pivotCount(=2) > targetIndex(=0), therefore
    - return pivot (=x).
  3. x > y:
    - smaller=[y], pivotCount=1, larger=[];
    - smallerCount(=1) > targetIndex(=0) : therefore
    - targetIndex remains 0, list becomes [y];
    - singleton case returns y.

If initial list is [16,1,2,0,4,2,7,1,2,14]:
  - targetIndex = floor(10/2) = 5;

  - pivot=16;
  - smaller=[1,2,0,4,2,7,1,2,14], pivotCount=1, larger=[];
  - smallerCount(=10) > targetIndex(=5), therefore
  - targetIndex remains 5, list=smaller=[1,2,0,4,2,7,1,2,14];

  - pivot=1;
  - smaller=[], pivotCount=2, larger=[2,0,4,2,7,2,14];
  - targetIndex = targetIndex - pivotCount = 3;
  - list=larger=[2,0,4,2,7,2,14];

  - pivot=2;
  - smaller=[0], pivotCount=3, larger=[4,7,14];
  - smallerCount(=1) < targetIndex(=3), therefore
  - targetIndex = targetIndex(=3) - smallerCount(=1) = 2;
  - pivotCount(=3) > targetIndex(=2), therefore
  - return pivot(=2).

Oh, but we need to compute the fuel needed to get there.
Is there a better way than going over the list once again?
Can't think of one right now. So we need to keep the initial list around.

 - copy crab list to temp list;
 - quickselect median of temp list;
 - for each crab in crab list:
   - result += crab - median;
 - return result.

With 1000 crabs each between 0 and 2000, and a median >= 0, the result
will be between 0 (all crabs equal) and 2000*1000 (median = 0 and all crabs
at 2000, which is impossible but a clear upper bound).

Let's make result an int64.

First we need to parse a list of shorts.

Then, copy it to a temporary list.

To quickselect, we need to know how to split a list according to its first element.

Ended up doing the brute force thing.

# Part 2

OK, now cost is asympotically the square of the distance:
  1 -> 1
  2 -> 1+2      = 3
  3 -> 1+2+3    = 6
  4 -> 1+2+3+4  = 10
  .
  .
  .
  n -> ∑1..n    = n*(n+1)/2 = (n^2 + n) / 2

Brute force should work the same since the cost to compute a cost is constant.

Hmm, I don't have an easy way to divide an int64 by 2 😭
I could shift bits, but instead I can multiply by 128 and then drop
the first byte!

What does the derivative look like for
  f(x) = x^2 + |x| ? (dropping the 1/2 factor because it has no bearing on optimization)

  f'(x) = 2x + x/|x|  { where x != 0 }

What does the derivative look like for
  f(x) = (x-a)^2 + |x-a| ? (_a_ being the crab's starting coordinate)
       = x^2 - 2ax + a^2 + |x-a|

  f'(x) = 2x - 2a + (x-a)/|x-a|  { where x != a }

What does the derivative look like for
  f(x) = k[(x-a)^2 + |x-a|] ? (_k_ being the number of crabs in the group at _a_)
       = k.x^2 - 2kax + k.a^2 + k|x-a|

  f'(x) = k[2x - 2a + (x-a)/|x-a|]  { where x != a }

  f'(x) = k[2x - 2a - 1 ]  { where x < a }
  f'(x) = k[2x - 2a + 1 ]  { where x > a }

Given three crab groups (k,a) (l,b) and (m,c), a < b < c:

  f'(x) =   k[2x - 2a + (x-a)/|x-a|] 
          + l[2x - 2b + (x-b)/|x-b|] 
          + m[2x - 2c + (x-c)/|x-c|]   { where x != a,b,c }

  f'(x) =   k[2x - 2a - 1] 
          + l[2x - 2b - 1] 
          + m[2x - 2c - 1]            { where x < a }
        = 2(k+l+m)x - 2(ka+lb+mc) - (k+l+m)

  f'(x) =   k[2x - 2a + 1] 
          + l[2x - 2b - 1] 
          + m[2x - 2c - 1]            { where a < x < b }
        = 2(k+l+m)x - 2(ka+lb+mc) + (k) - (l+m)

  f'(x) =   k[2x - 2a + 1] 
          + l[2x - 2b + 1] 
          + m[2x - 2c - 1]            { where b < x < c }
        = 2(k+l+m)x - 2(ka+lb+mc) + (k+l) - (m)

  f'(x) =   k[2x - 2a + 1] 
          + l[2x - 2b + 1] 
          + m[2x - 2c + 1]            { where c < x }
        = 2(k+l+m)x - 2(ka+lb+mc) + (k+l+m)

  k+l+m = [crab count] = C
  (ka+lb+mc) = [crab sum] = S

Y ^
  |                                                    ∂
  |                                                  ∂
  |                                                ∂
  |                                              ∂
  |                                            ∂
  |
  |
  |                                           ∂
  |                                         ∂
  |                                       ∂
  |                                     ∂
  |---------------------$--------*----∂-------!---------------------> X
  |                                 ∂
  |                               ∂
  |
  |                              ∂
  |                            ∂
  |                          ∂
  |                        ∂
  |                      ∂
  |
  |                    ∂
  |                  ∂
  |                ∂
  |              ∂

The derivative is piecewise linear with discontinuities at each crab.

It may cross the Y axis either within a segment, e.g.:

Y ^
  |                                         ∂
  |                                       ∂
  |                                     ∂
  |---------------------$--------*----∂-------!---------------------> X
  |                                 ∂
  |                               ∂

Or at a discontinuity, e.g.:

Y ^
  |                                                    ∂
  |                                                  ∂
  |                                                ∂
  |                                              ∂
  |                                            ∂
  |
  |---------------------$--------*----∂-------!---------------------> X
  |
  |                                           ∂
  |                                         ∂
  |                                       ∂
  |                                     ∂

A general formula seems to be:

  f'(x) = 2Cx - 2S + [count of crabs < x] - [count of crabs > x]

So, given a sorted list of crabs, we can evaluate the derivative to the
immediate right (x+ε, because it is undefined at a crab itself!)
of crab number _i_ ( 0 <= i < C ) with:

  f'(crabs[i]+ε) = 2C(crabs[i]+ε) - 2S + [count of crabs < crabs[i]+ε] - [count of crabs > crabs[i]+ε]
                 = 2C·crabs[i] + 2Cε - 2S + [count of crabs < crabs[i]+ε] - [count of crabs > crabs[i]+ε]

I'll go ahead and approximate 2Cε with ε, and apply the fact that crabs
have integer coordinates:

  f'(crabs[i]+ε) = 2C·crabs[i] - 2S + [count of crabs <= crabs[i]] - [count of crabs > crabs[i]] + ε

To start with, it is easier to think in terms of non-repeating crabs (i.e. all groups
have size 1).  If that held, we would have:

  f'(crabs[i]+ε) = 2C·crabs[i] - 2S + [i + 1] - [C - i - 1] + ε
                 = 2C·crabs[i] - 2S + i + 1 - C + i + 1 + ε
                 = 2C·crabs[i] - 2S + 2i + 2 - C + ε { no repeated crab }

If crabs can repeat, as is the case in both the sample and my input, computing
the count of crabs to the left or to the right of the crab at position _i_
requires looking through the list on the left and right of _i_ to avoid
double-counting those that share the x coordinate (value) of _i_.

[count of crabs > crabs[i]] must not count any other crab sharing
the same value as crabs[i], and [count of crabs <=crabs[i]] must
count all of those.

Indeed, the cost for the entire pack to join any crab that initially sits
at a given x must be independent of which one of these crabs we look at!

Can we avoid this looking around with a bit of preparation?

Grouping crabs by distinct value, would transform (arbitrarily taking the
"last" crab in the group as a representative):
  [ count of crabs to the left or at ith crab ]
into
  [ sum of sizes of groups up to and including ith group ]
and
  [ count of crabs to the right of ith crab ]
into
  [ C - [ sum of sizes of groups up to and including ith group ]]

But thinking a bit more, when we look at the "last" crab in a group of
identically-valued crabs (e.g 1 1 2 2 [2] 3 3 4 ), the "no repeated crab"
formula actually holds, since [count of crabs <= crabs[i]] is simply _i+1_,
and [count of crabs > crabs[i]] is all of the others i.e. _C - (i+1)_.

So, instead of grouping the list, we can instead:
  - either precompute for each crab the offset to the last crab in its group,
    in a single right-to-left scan of the list;
  - or, when trying to evaluate f'(crabs[i]+ε), first scan the list
    on the right of _i_ until we reach the last crab of this group.

Once we have done that, we can apply

  f'(crabs[i]+ε) = 2C·crabs[i] - 2S + 2i + 2 - C + ε     { i+1 == C || crabs[i+1] > crabs[i] }

Anyway, now that we know how to quickly compute the derivative at any crab,
how do we find the minimal cost?

We're looking for the x coordinate where the derivative goes from
below zero to above zero.

We know that at the left of the first crab, the derivative is negative, and at
the right of the last crab it is necessarily positive. We also know it
is strictly monotonous (f'(x2) > f'(x1) whenever x2 > x1).

So we could bisect the crab list to find an index _i_ where
  
  f'(crabs[i]+ε) < 0 and f'(crabs[i+1]+ε) > 0.

Or for a more basic though less efficient implementation, just scan the list
from left to right, skipping crabs that have the same value as their
neighbor on the right, and wait for the derivative to become positive.

Note that if we're scanning, we could use the fact that

  { i+1 == C || crabs[i+1] > crabs[i], (i+k)+1 == C || crabs[(i+k)+1] > crabs[(i+k)] }

  f'(crabs[i+k]+ε) - f'(crabs[i]+ε) =   ( 2C·crabs[i+k] - 2S + 2(i+k) + 2 - C + ε )
                                      - ( 2C·crabs[i]   - 2S + 2i     + 2 - C + ε )
                                    = 2C·(crabs[i+k] - crabs[i]) + 2k { playing it fast and loose with ε 🤞 }

to avoid recomputing f'(crabs[i+k]) from scratch given we have f'(crabs[i]) on
hand, but in fact it looks more trouble than it's worth.

Let's get rid of the edge cases of f' being positive on the immediate right of
the first crab (group) — just exit with that position as the answer; and
f' still being negative at the right of the last crab — this can't actually
happen as it would mean that the entire pack would have to move right.

Now that we have the two positions bounding the optimal position, there
are still two cases to consider:

Either the derivative crosses the Y axis in a linear segment:

Y ^
  |                                         ∂
  |                                       ∂
  |                                     ∂
  |---------------------$--------*----∂-------!---------------------> X
  |                                 ∂
  |                               ∂

Or at a discontinuity:

Y ^
  |                                                    ∂
  |                                                  ∂
  |                                                ∂
  |                                              ∂
  |                                            ∂
  |
  |---------------------$--------*----∂-------!---------------------> X
  |
  |                                           ∂
  |                                         ∂
  |                                       ∂
  |                                     ∂

Because of this last case, we can't just intersect the line starting
at (crabs[i]+ε, f'(crabs[i]+ε)) with the Y axis.

Actually, it looks like we can, but we have to clamp the resulting _x_
to crabs[i+1]:

Y ^
  |                                                    ∂
  |                                                  ∂
  |                                                ∂
  |                                              ∂      *
  |                                            ∂      *
  |                                                 *
  |---------------------$--------*----∂-------!---*-----------------> X
  |                                             * ^ Don't take this x
  |                                           ∂   
  |                                         ∂ ^
  |                                       ∂   · Take this one instead
  |                                     ∂

The line equation we're looking at is:

  f'(crabs[i]+∆x) = f'(crabs[i]+ε) + 2C·∆x

Solving

  f'(crabs[i]+ε) + 2C·∆x = 0

We find

  ∆x = -f'(crabs[i]+ε) / 2C

  ∆x = -(2C·crabs[i] - 2S + 2i + 2 - C) / 2C
     = -(crabs[i] - S/C + 2i/2C + 2/2C - C/2C)
     = -crabs[i] + S/C - i/C - 1/C + 1/2
     = -crabs[i] + (S - i - 1)/C + 1/2
  crabs[i]+∆x = (S - i - 1)/C + 1/2

Checking:
  f'(crabs[i]+∆x) = f'((S - i - 1)/C + 1/2)

Let's remember:
  f'(x) = 2Cx - 2S + [count of crabs < x] - [count of crabs > x]

We're on a segment between crabs[i] and crabs[i+1], so the [count of crabs < x]
here is i+1, and [count of crabs > x] is C - (i+1).

We get:
  f'(crabs[i]+∆x) = 2C((S - i - 1)/C + 1/2) - 2S + (i+1) - (C - (i+1))
                  = 2C((S - i - 1)/C) + 2C(1/2) - 2S + (i+1) - C + (i+1)
                  = 2(S - i - 1) + C - 2S - C + 2(i+1)
                  = 2S - 2(i + 1) + C - 2S - C + 2(i+1)
                  = 0 ☑️

So it looks like if we take

  min(crabs[i+1], (S - i - 1)/C + 1/2)

We should be golden?

Alternatively, we can just walk from crabs[i], repeatedly adding 2C 
to f'(crabs[i]+ε) until we cross 0.

Applying to the sample: 16,1,2,0,4,2,7,1,2,14 

Sorted: 0 1 1 2 2 2 4 7 14 16 

Statistics:
  C = 10
  S = 49

We know the solution is x=5, so we should get f'(4+ε) < 0 and f'(7+ε) > 0.
Let's see:
  f'(4+ε) = 2C·4 - 2S + [count of crabs <= 4] - [count of crabs > 4]
          = 2*10*4 - 2*49 + 7 - 3
          = -14 ☑️

  f'(7+ε) = 2C·7 - 2S + [count of crabs <= 7] - [count of crabs > 7]
          = 2*10*7 - 2*49 + 8 - 2
          = 46 ☑️

Does this work with indices? We have crabs[6]=4, crabs[7]=7:
  f'(crabs[6]+ε) = 2C·crabs[6] - 2S + 2·6 + 2 - C
                 = 2*10*4 - 2*49 + 2*6 + 2 - 10
                 = -14 ☑️

  f'(crabs[7]+ε) = 2C·crabs[7] - 2S + 2·7 + 2 - C
                 = 2*10*7 - 2*49 + 2*6 + 2 - 10
                 = 46 ☑️

We have i=6 as the last index with a negative derivative.
Now to find the y=0 point:

Starting from (4, -14) with a slope of 2*C=20, we find
(5, 6) as the first integer-x point above the Y axis.

But the actual point of intersection is at x = 4+14/20 = 4.7.
Now I'm wondering how we should round this.
In terms of cost, we're looking at a saddle. The nearest integer
for x should also be the lowest of both costs. And if the
solution is halfway between two integers, any one will do.

Checking the intersection formula:
  x = (S - i - 1)/C + 1/2
    = (49 - 6 - 1)/10 + 1/2
    = 42/10 + 1/2
    = 4.7 ☑️

Let's try on my input.

  $ ghci
  zsh: command not found: ghci

Oops.
  $ node
  > crabs=fs.readFileSync('day7.txt','ascii').split(',').map(s=>parseInt(s)).sort((a,b)=>a-b)
  [
     0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,
     1,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,
    ... 
  ]

  > C=crabs.length
  1000

  > S=crabs.reduce((a,b)=>a+b)
  458585

  // f'(crabs[i]+ε) = 2C·crabs[i] - 2S + 2i + 2 - C + ε     { i+1 == C || crabs[i+1] > crabs[i] }
  > crabs.map((crab,i) => 2*C*crab - 2*S + 2*i + 2 - C)

  > console.table(crabs.map((crab,i) => ({crab,"f'(crab)":2*C*crab - 2*S + 2*i + 2 - C})))
  ┌─────────┬──────┬──────────┐
  │ (index) │ crab │ f'(crab) │
  ├─────────┼──────┼──────────┤
  │    0    │  0   │ -918168  │
  │    1    │  0   │ -918166  │
  │    2    │  0   │ -918164  │
  │    3    │  0   │ -918162  │
  ┊         ┊      ┊          ┊
  │   594   │ 457  │  -2980   │
  │   595   │ 459  │  1022    │
  ┊         ┊      ┊          ┊

We do indeed find a solution between the crabs at 457 and 459. My correct solution found by brute-force
was 458.

# Relationship with the average value of crabs

People on the internet have demonstrated that in fact the seeked x value
always lies less than 1/2 away from the average value of the crabs.

Let's see how this computes. The average is of course S/C.

  f'(S/C) = 2C(S/C) - 2S + [count of crabs < S/C] - [count of crabs > S/C]
          = [count of crabs < S/C] - [count of crabs > S/C]

In the case where no crab lies at the average value, this does indeed yield
a perfect zero. Which is wrong, so I missed something somehow 🤔


