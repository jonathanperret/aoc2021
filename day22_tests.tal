~library/macros.tal
~library/devices.tal
~day22_macros.tal

( variables )

|0000

|0100 @program

  T< "step-parse: >T
  S< >S ;test-step-parse JSR2
  ( EXPECT eof )
  S< "on 20 "x=-20..26,y=-36..17,z=-47..7 0a >S ;test-step-parse JSR2
  ( EXPECT { # [-20..26[ [-36..17[ [-47..7[ } )

  T< "steps-parse: >T
  S<
    "on 20 "x=-20..26,y=-36..17,z=-47..7 0a
    "off 20 "x=-44..5,y=-19..31,z=-15..33 0a >S ;test-steps-parse JSR2
  ( EXPECT { # [-20..27[ [-36..18[ [-47..8[ } )
  ( EXPECT { . [-44..6[ [-19..32[ [-15..34[ } )
  ( EXPECT x: )
  ( EXPECT < -44 { . [-44..6[ [-19..32[ [-15..34[ } )
  ( EXPECT < -20 { # [-20..27[ [-36..18[ [-47..8[ } )
  ( EXPECT > 6 { . [-44..6[ [-19..32[ [-15..34[ } )
  ( EXPECT > 27 { # [-20..27[ [-36..18[ [-47..8[ } )
  ( EXPECT y: )
  ( EXPECT < -36 { # [-20..27[ [-36..18[ [-47..8[ } )
  ( EXPECT < -19 { . [-44..6[ [-19..32[ [-15..34[ } )
  ( EXPECT > 18 { # [-20..27[ [-36..18[ [-47..8[ } )
  ( EXPECT > 32 { . [-44..6[ [-19..32[ [-15..34[ } )
  ( EXPECT z: )
  ( EXPECT < -47 { # [-20..27[ [-36..18[ [-47..8[ } )
  ( EXPECT < -15 { . [-44..6[ [-19..32[ [-15..34[ } )
  ( EXPECT > 8 { # [-20..27[ [-36..18[ [-47..8[ } )
  ( EXPECT > 34 { . [-44..6[ [-19..32[ [-15..34[ } )

  T< "draw-slice: >T
  S<
    "on 20 "x=-2..3,y=2..3,z=-47..7 0a
    "on 20 "x=-20..20,y=-20..20,z=-40..-40 0a
    "off 20 "x=-3..0,y=-1..2,z=-15..33 0a
  >S #0001 ;test-draw-slice JSR2
  ( EXPECT .......... )
  ( EXPECT .......... )
  ( EXPECT ..######.. )
  ( EXPECT .....###.. )
  ( EXPECT .......... )
  ( EXPECT .......... )
  ( EXPECT .......... )
  ( EXPECT .......... )
  ( EXPECT .......... )
  ( EXPECT .......... )
  ( EXPECT 9 )

  T< "event-list/init: >T
  ;t/elist1 ;eventlist/init JSR2
  ;t/elist1 ;eventlist/dump JSR2

  T< "event-list/insert: >T
  S< "on 20 "x=-20..26,y=-36..17,z=3..7 0a >S ;make-get-byte JSR2 ;t/step1 ;step/parse JSR2 POP
  ;t/elist1 #01 [ ;t/step1 STEP.zmin ] ;t/step1 ;eventlist/insert JSR2
  ;t/elist1 ;eventlist/dump JSR2
  ( EXPECT < 3 { # [-20..26[ [-36..17[ [3..7[ } )

  T< "event-list/insert2: >T
  ;t/elist1 #ff [ ;t/step1 STEP.zmax ] ;t/step1 ;eventlist/insert JSR2
  ;t/elist1 ;eventlist/dump JSR2
  ( EXPECT < 3 { # [-20..26[ [-36..17[ [3..7[ } )
  ( EXPECT > 7 { # [-20..26[ [-36..17[ [3..7[ } )

  T< "event-list/insert3: >T
  S< "on 20 "x=-10..16,y=-26..-5,z=5..9 0a >S ;make-get-byte JSR2 ;t/step2 ;step/parse JSR2 POP
  ;t/elist1 #01 [ ;t/step2 STEP.zmin ] ;t/step2 ;eventlist/insert JSR2
  ;t/elist1 ;eventlist/dump JSR2
  ( EXPECT < 3 { # [-20..26[ [-36..17[ [3..7[ } )
  ( EXPECT < 5 { # [-10..16[ [-26..-5[ [5..9[ } )
  ( EXPECT > 7 { # [-20..26[ [-36..17[ [3..7[ } )

  T< "sweep: >T
  S<
    "on  20 "x=10..12,y=10..12,z=10..12 0a
    "on  20 "x=11..13,y=11..13,z=11..13 0a
    "off 20 "x=9..11,y=9..11,z=9..11    0a
    "on  20 "x=10..10,y=10..10,z=10..10 0a
  >S ;make-get-byte JSR2 ;steps/parse JSR2
  ;sweeper/compute-total-volume JSR2

  ( EXPECT z=[-16777216..8]=16777225 )
  ( EXPECT z=[9..9]=1 )
  ( EXPECT  y=[-16777216..8]=16777225 )
  ( EXPECT  y=[9..11]=3 )
  ( EXPECT   x=[-16777216..8]=16777225 )
  ( EXPECT   x=[9..11]=3 )
  ( EXPECT z=[10..10]=1 )
  ( EXPECT  y=[-16777216..8]=16777225 )
  ( EXPECT  y=[9..9]=1 )
  ( EXPECT   x=[-16777216..8]=16777225 )
  ( EXPECT   x=[9..11]=3 )
  ( EXPECT  y=[10..10]=1 )
  ( EXPECT   x=[-16777216..8]=16777225 )
  ( EXPECT   x=[9..9]=1 )
  ( EXPECT   x=[10..10]=1 )
  ( EXPECT    +1 )
  ( EXPECT   x=[11..11]=1 )
  ( EXPECT   x=[12..12]=1 )
  ( EXPECT    +1 )
  ( EXPECT  y=[11..11]=1 )
  ( EXPECT   x=[-16777216..8]=16777225 )
  ( EXPECT   x=[9..9]=1 )
  ( EXPECT   x=[10..11]=2 )
  ( EXPECT   x=[12..12]=1 )
  ( EXPECT    +1 )
  ( EXPECT  y=[12..12]=1 )
  ( EXPECT   x=[-16777216..9]=16777226 )
  ( EXPECT   x=[10..12]=3 )
  ( EXPECT    +3 )
  ( EXPECT z=[11..11]=1 )
  ( EXPECT  y=[-16777216..8]=16777225 )
  ( EXPECT  y=[9..9]=1 )
  ( EXPECT   x=[-16777216..8]=16777225 )
  ( EXPECT   x=[9..11]=3 )
  ( EXPECT  y=[10..10]=1 )
  ( EXPECT   x=[-16777216..8]=16777225 )
  ( EXPECT   x=[9..9]=1 )
  ( EXPECT   x=[10..11]=2 )
  ( EXPECT   x=[12..12]=1 )
  ( EXPECT    +1 )
  ( EXPECT  y=[11..11]=1 )
  ( EXPECT   x=[-16777216..8]=16777225 )
  ( EXPECT   x=[9..9]=1 )
  ( EXPECT   x=[10..10]=1 )
  ( EXPECT   x=[11..11]=1 )
  ( EXPECT   x=[12..12]=1 )
  ( EXPECT    +1 )
  ( EXPECT   x=[13..13]=1 )
  ( EXPECT    +1 )
  ( EXPECT  y=[12..12]=1 )
  ( EXPECT   x=[-16777216..9]=16777226 )
  ( EXPECT   x=[10..10]=1 )
  ( EXPECT    +1 )
  ( EXPECT   x=[11..12]=2 )
  ( EXPECT    +2 )
  ( EXPECT   x=[13..13]=1 )
  ( EXPECT    +1 )
  ( EXPECT  y=[13..13]=1 )
  ( EXPECT   x=[-16777216..10]=16777227 )
  ( EXPECT   x=[11..13]=3 )
  ( EXPECT    +3 )
  ( EXPECT z=[12..12]=1 )
  ( EXPECT  y=[-16777216..9]=16777226 )
  ( EXPECT  y=[10..10]=1 )
  ( EXPECT   x=[-16777216..9]=16777226 )
  ( EXPECT   x=[10..12]=3 )
  ( EXPECT    +3 )
  ( EXPECT  y=[11..12]=2 )
  ( EXPECT   x=[-16777216..9]=16777226 )
  ( EXPECT   x=[10..10]=1 )
  ( EXPECT    +2 )
  ( EXPECT   x=[11..12]=2 )
  ( EXPECT    +4 )
  ( EXPECT   x=[13..13]=1 )
  ( EXPECT    +2 )
  ( EXPECT  y=[13..13]=1 )
  ( EXPECT   x=[-16777216..10]=16777227 )
  ( EXPECT   x=[11..13]=3 )
  ( EXPECT    +3 )
  ( EXPECT z=[13..13]=1 )
  ( EXPECT  y=[-16777216..10]=16777227 )
  ( EXPECT  y=[11..13]=3 )
  ( EXPECT   x=[-16777216..10]=16777227 )
  ( EXPECT   x=[11..13]=3 )
  ( EXPECT    +9 )
  ( EXPECT total=39 )

  T< "👍 >T
  BRK !

( s* -- )
@test-step-parse
  ;make-get-byte JSR2 ;t/step1 ;step/parse JSR2
  ,&not-eof JCN
    P< "eof >P LF
    RTN
  &not-eof

  ;t/step1 ;step/dump JSR2 LF
  RTN

( s* -- )
@test-steps-parse
  ;make-get-byte JSR2 ;steps/parse JSR2

  ;steps/dump JSR2
  RTN

( s* z -- )
@test-draw-slice
  ;&z* ;short-to-64/signed JSR2
  ;make-get-byte JSR2 ;steps/parse JSR2

  #000a #000a ;matrix/init JSR2

  ;&xmin* #fffc ;short-to-64/signed JSR2
  ;&ymin* #fffc ;short-to-64/signed JSR2
  ;&xmax* #0005 ;short-to-64/signed JSR2
  ;&ymax* #0005 ;short-to-64/signed JSR2
  ;&z*    #0000 ;short-to-64/signed JSR2

  ;&xmin* ;&xmax* ;&ymin* ;&ymax* ;&z* ;steps/draw JSR2

  ;matrix/dump JSR2

  ;matrix/count JSR2 DBGSHORTDEC POP2

  RTN
  [ &z* $8 &xmin* $8 &xmax* $8 &ymin* $8 &ymax* $8 ]

( s* -- get-byte )
@make-get-byte
  ;input STA2
  ;get-byte-from-input
  RTN

( -- b )
@get-byte-from-input
  [ ;input LDA2 ] LDA STH
  [ ;input LDA2 ] INC2 [ ;input STA2 ]
  STHr
  RTN

@input $2

@t
  [ &step1 STEPPAD &step2 STEPPAD &elist1 $100 &x $8 ]

~library/test.tal
~day22_lib.tal
