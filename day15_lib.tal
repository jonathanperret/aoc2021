@risk-matrix
  [ &_risks $3000 &_w $2 &_h $2 ]

  ( get-byte -- )
  &parse
    [ ;&parse/get-byte STA2 ]
    #00 #3000 ;&_risks ;memset JSR2

    #0000 [ ;&_h STA2 ]
    LIT2r :&_risks ( : p* )
    #0000 [ ;&parse/w STA2 ]
    &parse/loop
      LIT2 [ &parse/get-byte $2 ] JSR2
      DUP #00 EQU ;&parse/done JCN2
      DUP #0a EQU ;&parse/next-row JCN2
      LIT '0 SUB              ( parse )
      STH2rk STA INC2r        ( store )
      [ ;&parse/w *INC2 ]     ( count )
      ;&parse/loop JMP2
      &parse/next-row
      POP
      [ ;&_h *INC2 ]
      [ ;&parse/w LDA2 ] #0000 EQU2 ,&parse/not-started JCN
        [ ;&parse/w LDA2 ] [ ;&_w STA2 ]
      &parse/not-started
      #0000 [ ;&parse/w STA2 ]
      ;&parse/loop JMP2
    &parse/done
    POP POP2r
    RTN
    [ &parse/w $2 ]

  ( x y -- ptr )
  &ptr-at
    DUP2 [ ;&_h LDA2 ] GEQ2 ,&ptr-at/outside JCN
    OVR2 [ ;&_w LDA2 ] GEQ2 ,&ptr-at/outside JCN
    [ ;&_h LDA2 ] MUL2 ADD2
    ;&_risks ADD2
    RTN

    &ptr-at/outside
    POP2 POP2
    #ff [ ;&dummy-cell STA ]
    ;&dummy-cell
    RTN
    [ &dummy-cell $1 ]

  ( -- )
  &dump
    [ ;&_w LDA2 ] DBGSHORTDECn SP POP2
    [ ;&_h LDA2 ] DBGSHORTDEC POP2
    #0000 [ ;&_h LDA2 ] DO
      #0000 [ ;&_w LDA2 ] DO
        DUP4 SWP2 ;&get-at JSR2
        #00 SWP ;print-short-no0x JSR2
        SP
      LOOP
      LF
    LOOP
    RTN

  ( x y -- val )
  &get-at
    ;&ptr-at JSR2 LDA
    RTN

%COSTLIST_SIZE { $a000 }

@cost-matrix
  &init
    [ ;risk-matrix/_w LDA2 ] [ ;&_w STA2 ]
    [ ;risk-matrix/_h LDA2 ] [ ;&_h STA2 ]
    #00 ;&_costlist_end ;&_costlist SUB2 ;&_costlist ;memset JSR2
    #ffff [ ;&_costlist STA2 ]
    RTN

  ( val x y -- )
  &set-at
    ( find end of costlist )
    LIT2r :&_costlist ( : cost* )
    &set-at/loop
      STH2rk LDA2 #ffff EQU2 ,&set-at/at-end JCN
      ( val x y : cost* )
      LIT2r 0006 ADD2r
      ,&set-at/loop JMP
    &set-at/at-end
    ( bounds check )
    ;&_costlist_end STH2rk GTH2 ,&set-at/bounds-ok JCN
      P< "costlist 20 "bounds 20 "exceeded >P
      !
    &set-at/bounds-ok

    ( val x y : cost* )
    SWP2 ( val y x : cost* )
    STH2rk STA2 INC2r INC2r
    STH2rk STA2 INC2r INC2r
    STH2rk STA2 INC2r INC2r
    #ffff STH2r STA2
    RTN

  ( x y -- val )
  &get-at
    DUP2 [ ;&_h LDA2 ] GEQ2 ,&lga/outside JCN
    OVR2 [ ;&_w LDA2 ] GEQ2 ,&lga/outside JCN

    STH2 STH2 ( : x y )
    ( scan costlist )
    ;&_costlist ( cost* : x y )
    &list-get-at/loop
      LDA2k #ffff EQU2 ,&list-get-at/at-end JCN
      ( cost* : x y )
      LDA2k STH2rk NEQ2 ,&list-get-at/next JCN
      ( cost* : x y )
      DUP2 #0002 ADD2 LDA2 OVR2r STH2r NEQ2 ,&list-get-at/next JCN

      ( found match )
      ( cost* : x y )
      POP2r POP2r
      #0004 ADD2 LDA2
      RTN

      &list-get-at/next
      #0006 ADD2
      ,&list-get-at/loop JMP
    &list-get-at/at-end
    ( cost* : x y )
    POP2 POP2r POP2r
    #0000
    RTN

    &lga/outside
      POP2 POP2
      #ffff
      RTN

  ( -- count )
  &count
    ( scan costlist )
    ;&_costlist ( cost* )
    &count/loop
      LDA2k #ffff EQU2 ,&count/at-end JCN
      #0006 ADD2
      ,&count/loop JMP
    &count/at-end
    ( cost-end* )
    ;&_costlist SUB2 #0006 DIV2
    RTN

  ( val x y -- )
  &combine-at
    STH2k OVR2 STH2 ( val x y : x y )
    ;&get-at JSR2 ( val cellval : x y )
    #000f GTH2 ,&combine-at/visited JCN
      ( val : x y )
      STH2rk OVR2r STH2r ( val x y : x y )
      ;risk-matrix/get-at JSR2 #00 SWP
      ( val cellval : x y )
      ADD2 ( val+cellval : x y )
      STH2r STH2r ( val+cellval x y )
      ;&set-at JSR2
    RTN
    &combine-at/visited
      ( val : x y )
      POP2
      POP2r POP2r
    RTN

  ( x y -- )
  &flood-from
    DUP4 ;&get-at JSR2 STH2 ( : val )
    OVR2 INC2 OVR2 STH2rk ROT2 ROT2 ;&combine-at JSR2
    OVR2 DEC2 OVR2 STH2rk ROT2 ROT2 ;&combine-at JSR2
    OVR2 OVR2 INC2 STH2rk ROT2 ROT2 ;&combine-at JSR2
              DEC2 STH2rk ROT2 ROT2 ;&combine-at JSR2
    POP2r
    RTN

  ( val -- )
  &flood-matching
    STH2 ( : val )
    ( scan costlist )
    ;&_costlist ( cost* : x y )
    &flood-matching/loop
      LDA2k #ffff EQU2 ,&flood-matching/at-end JCN
      ( cost* : val )
      DUP2 #0004 ADD2 LDA2 STH2rk NEQ2 ,&flood-matching/next JCN

      ( found match )
      ( cost* : val )
      LDA2k ( cost* x : val )
      OVR2 #0002 ADD2 LDA2 ( cost* x y : val )
      ;&flood-from JSR2
      ( cost* : val )

      &flood-matching/next
      #0006 ADD2
      ,&flood-matching/loop JMP
    &flood-matching/at-end
    ( cost* : val )
    POP2 POP2r
    RTN

    #0000 [ ;&_w LDA2 ] DO
      #0000 [ ;&_h LDA2 ] DO
        ( val x y )
        DUP4 ;&get-at JSR2 ( val x y cellval )
        SWP2 STH2 SWP2 STH2 OVR2 ( val cellval val : x y )
        NEQ2 ,&flood-matching/skip JCN
          ( val : x y )
          STH2rk OVR2r STH2r ( val x y : x y )
          ;&flood-from JSR2
          ( val : x y )
        &flood-matching/skip
        ( val : x y )
        STH2r STH2r
        ( val x y )
      LOOP
    LOOP
    POP2
    RTN

  ( -- )
  &flood-all
    #0010 #0000 #0000 ;&set-at JSR2
    #0010 #ffff DO
      ( DBGSHORTDECn SP ;&count JSR2 DBGSHORTDEC POP2 )
      DUP2 ;&flood-matching JSR2
      ;&get-end JSR2
      #0010 LTH2 ,&flood-all/not-done JCN
        UNLOOP
        RTN
      &flood-all/not-done
    LOOP
    RTN

  ( -- )
  &list-dump
    LIT2r :&_costlist ( : cost* )
    &list-dump/loop
      STH2rk LDA2 #ffff EQU2 ,&list-dump/at-end JCN
      ( : cost* )
      STH2rk LDA2k DBGSHORTDECn SP POP2
      #0002 ADD2 LDA2k DBGSHORTDECn SP POP2
      #0002 ADD2 LDA2k ;print-short-no0x JSR2
      POP2
      LF
      LIT2r 0006 ADD2r
      ,&list-dump/loop JMP
    &list-dump/at-end
    ( : cost* )
    POP2r
    RTN

  ( -- )
  &dump
    [ ;&_w LDA2 ] DBGSHORTDECn SP POP2
    [ ;&_h LDA2 ] DBGSHORTDEC POP2
    #0000 [ ;&_h LDA2 ] DO
      #0000 [ ;&_w LDA2 ] DO
        DUP4 SWP2 ;&get-at JSR2
        ;print-short-no0x JSR2
        SP
      LOOP
      LF
    LOOP
    RTN

  ( -- end-val )
  &get-end
    [ ;&_w LDA2 ] DEC2 [ ;&_h LDA2 ] DEC2 ;&get-at JSR2
    RTN

  ( -- risk )
  &get-end-cost
    ;&get-end JSR2
    #0010 SUB2
    RTN

  [ &_costlist COSTLIST_SIZE &_costlist_end
    &_w $2 &_h $2 ]


~library/console.lib.tal
~library/string.tal
~library/math.tal
